<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0-or-later */
/* packet.h: Rx packet layout and definitions
 *
 * Copyright (C) 2002, 2007 Red Hat, Inc. All Rights Reserved.
 * Written by David Howells (dhowells@redhat.com)
 */

#अगर_अघोषित _LINUX_RXRPC_PACKET_H
#घोषणा _LINUX_RXRPC_PACKET_H

प्रकार u32	rxrpc_seq_t;	/* Rx message sequence number */
प्रकार u32	rxrpc_serial_t;	/* Rx message serial number */
प्रकार __be32	rxrpc_seq_net_t; /* on-the-wire Rx message sequence number */
प्रकार __be32	rxrpc_serial_net_t; /* on-the-wire Rx message serial number */

/*****************************************************************************/
/*
 * on-the-wire Rx packet header
 * - all multibyte fields should be in network byte order
 */
काष्ठा rxrpc_wire_header अणु
	__be32		epoch;		/* client boot बारtamp */
#घोषणा RXRPC_RANDOM_EPOCH	0x80000000	/* Ranकरोm अगर set, date-based अगर not */

	__be32		cid;		/* connection and channel ID */
#घोषणा RXRPC_MAXCALLS		4			/* max active calls per conn */
#घोषणा RXRPC_CHANNELMASK	(RXRPC_MAXCALLS-1)	/* mask क्रम channel ID */
#घोषणा RXRPC_CIDMASK		(~RXRPC_CHANNELMASK)	/* mask क्रम connection ID */
#घोषणा RXRPC_CIDSHIFT		ilog2(RXRPC_MAXCALLS)	/* shअगरt क्रम connection ID */
#घोषणा RXRPC_CID_INC		(1 << RXRPC_CIDSHIFT)	/* connection ID increment */

	__be32		callNumber;	/* call ID (0 क्रम connection-level packets) */
	__be32		seq;		/* sequence number of pkt in call stream */
	__be32		serial;		/* serial number of pkt sent to network */

	uपूर्णांक8_t		type;		/* packet type */
#घोषणा RXRPC_PACKET_TYPE_DATA		1	/* data */
#घोषणा RXRPC_PACKET_TYPE_ACK		2	/* ACK */
#घोषणा RXRPC_PACKET_TYPE_BUSY		3	/* call reject */
#घोषणा RXRPC_PACKET_TYPE_ABORT		4	/* call/connection पात */
#घोषणा RXRPC_PACKET_TYPE_ACKALL	5	/* ACK all outstanding packets on call */
#घोषणा RXRPC_PACKET_TYPE_CHALLENGE	6	/* connection security challenge (SRVR->CLNT) */
#घोषणा RXRPC_PACKET_TYPE_RESPONSE	7	/* connection secutity response (CLNT->SRVR) */
#घोषणा RXRPC_PACKET_TYPE_DEBUG		8	/* debug info request */
#घोषणा RXRPC_PACKET_TYPE_PARAMS	9	/* Parameter negotiation (unspec'd, ignore) */
#घोषणा RXRPC_PACKET_TYPE_10		10	/* Ignored */
#घोषणा RXRPC_PACKET_TYPE_11		11	/* Ignored */
#घोषणा RXRPC_PACKET_TYPE_VERSION	13	/* version string request */

	uपूर्णांक8_t		flags;		/* packet flags */
#घोषणा RXRPC_CLIENT_INITIATED	0x01		/* signअगरies a packet generated by a client */
#घोषणा RXRPC_REQUEST_ACK	0x02		/* request an unconditional ACK of this packet */
#घोषणा RXRPC_LAST_PACKET	0x04		/* the last packet from this side क्रम this call */
#घोषणा RXRPC_MORE_PACKETS	0x08		/* more packets to come */
#घोषणा RXRPC_JUMBO_PACKET	0x20		/* [DATA] this is a jumbo packet */
#घोषणा RXRPC_SLOW_START_OK	0x20		/* [ACK] slow start supported */

	uपूर्णांक8_t		userStatus;	/* app-layer defined status */
#घोषणा RXRPC_USERSTATUS_SERVICE_UPGRADE 0x01	/* AuriStor service upgrade request */
	
	uपूर्णांक8_t		securityIndex;	/* security protocol ID */
	जोड़ अणु
		__be16	_rsvd;		/* reserved */
		__be16	cksum;		/* kerberos security checksum */
	पूर्ण;
	__be16		serviceId;	/* service ID */

पूर्ण __packed;

/*****************************************************************************/
/*
 * jumbo packet secondary header
 * - can be mapped to पढ़ो header by:
 *   - new_serial = serial + 1
 *   - new_seq = seq + 1
 *   - new_flags = j_flags
 *   - new__rsvd = j__rsvd
 *   - duplicating all other fields
 */
काष्ठा rxrpc_jumbo_header अणु
	uपूर्णांक8_t		flags;		/* packet flags (as per rxrpc_header) */
	uपूर्णांक8_t		pad;
	जोड़ अणु
		__be16	_rsvd;		/* reserved */
		__be16	cksum;		/* kerberos security checksum */
	पूर्ण;
पूर्ण;

#घोषणा RXRPC_JUMBO_DATALEN	1412	/* non-terminal jumbo packet data length */
#घोषणा RXRPC_JUMBO_SUBPKTLEN	(RXRPC_JUMBO_DATALEN + माप(काष्ठा rxrpc_jumbo_header))

/*
 * The maximum number of subpackets that can possibly fit in a UDP packet is:
 *
 *	((max_IP - IP_hdr - UDP_hdr) / RXRPC_JUMBO_SUBPKTLEN) + 1
 *	= ((65535 - 28 - 28) / 1416) + 1
 *	= 46 non-terminal packets and 1 terminal packet.
 */
#घोषणा RXRPC_MAX_NR_JUMBO	47

/*****************************************************************************/
/*
 * on-the-wire Rx ACK packet data payload
 * - all multibyte fields should be in network byte order
 */
काष्ठा rxrpc_ackpacket अणु
	__be16		bufferSpace;	/* number of packet buffers available */
	__be16		maxSkew;	/* dअगरf between serno being ACK'd and highest serial no
					 * received */
	__be32		firstPacket;	/* sequence no of first ACK'd packet in attached list */
	__be32		previousPacket;	/* sequence no of previous packet received */
	__be32		serial;		/* serial no of packet that prompted this ACK */

	uपूर्णांक8_t		reason;		/* reason क्रम ACK */
#घोषणा RXRPC_ACK_REQUESTED		1	/* ACK was requested on packet */
#घोषणा RXRPC_ACK_DUPLICATE		2	/* duplicate packet received */
#घोषणा RXRPC_ACK_OUT_OF_SEQUENCE	3	/* out of sequence packet received */
#घोषणा RXRPC_ACK_EXCEEDS_WINDOW	4	/* packet received beyond end of ACK winकरोw */
#घोषणा RXRPC_ACK_NOSPACE		5	/* packet discarded due to lack of buffer space */
#घोषणा RXRPC_ACK_PING			6	/* keep alive ACK */
#घोषणा RXRPC_ACK_PING_RESPONSE		7	/* response to RXRPC_ACK_PING */
#घोषणा RXRPC_ACK_DELAY			8	/* nothing happened since received packet */
#घोषणा RXRPC_ACK_IDLE			9	/* ACK due to fully received ACK winकरोw */
#घोषणा RXRPC_ACK__INVALID		10	/* Representation of invalid ACK reason */

	uपूर्णांक8_t		nAcks;		/* number of ACKs */
#घोषणा RXRPC_MAXACKS	255

	uपूर्णांक8_t		acks[0];	/* list of ACK/NAKs */
#घोषणा RXRPC_ACK_TYPE_NACK		0
#घोषणा RXRPC_ACK_TYPE_ACK		1

पूर्ण __packed;

/* Some ACKs refer to specअगरic packets and some are general and can be updated. */
#घोषणा RXRPC_ACK_UPDATEABLE ((1 << RXRPC_ACK_REQUESTED)	|	\
			      (1 << RXRPC_ACK_PING_RESPONSE)	|	\
			      (1 << RXRPC_ACK_DELAY)		|	\
			      (1 << RXRPC_ACK_IDLE))


/*
 * ACK packets can have a further piece of inक्रमmation tagged on the end
 */
काष्ठा rxrpc_ackinfo अणु
	__be32		rxMTU;		/* maximum Rx MTU size (bytes) [AFS 3.3] */
	__be32		maxMTU;		/* maximum पूर्णांकerface MTU size (bytes) [AFS 3.3] */
	__be32		rwind;		/* Rx winकरोw size (packets) [AFS 3.4] */
	__be32		jumbo_max;	/* max packets to stick पूर्णांकo a jumbo packet [AFS 3.5] */
पूर्ण;

/*****************************************************************************/
/*
 * Kerberos security type-2 challenge packet
 */
काष्ठा rxkad_challenge अणु
	__be32		version;	/* version of this challenge type */
	__be32		nonce;		/* encrypted अक्रमom number */
	__be32		min_level;	/* minimum security level */
	__be32		__padding;	/* padding to 8-byte boundary */
पूर्ण __packed;

/*****************************************************************************/
/*
 * Kerberos security type-2 response packet
 */
काष्ठा rxkad_response अणु
	__be32		version;	/* version of this response type */
	__be32		__pad;

	/* encrypted bit of the response */
	काष्ठा अणु
		__be32		epoch;		/* current epoch */
		__be32		cid;		/* parent connection ID */
		__be32		checksum;	/* checksum */
		__be32		securityIndex;	/* security type */
		__be32		call_id[4];	/* encrypted call IDs */
		__be32		inc_nonce;	/* challenge nonce + 1 */
		__be32		level;		/* desired level */
	पूर्ण encrypted;

	__be32		kvno;		/* Kerberos key version number */
	__be32		ticket_len;	/* Kerberos ticket length  */
पूर्ण __packed;

#पूर्ण_अगर /* _LINUX_RXRPC_PACKET_H */
