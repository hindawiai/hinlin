<शैली गुरु>
/*
 * net/tipc/subscr.h: Include file क्रम TIPC network topology service
 *
 * Copyright (c) 2003-2017, Ericsson AB
 * Copyright (c) 2005-2007, 2012-2013, Wind River Systems
 * Copyright (c) 2020-2021, Red Hat Inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary क्रमms, with or without
 * modअगरication, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary क्रमm must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    करोcumentation and/or other materials provided with the distribution.
 * 3. Neither the names of the copyright holders nor the names of its
 *    contributors may be used to enकरोrse or promote products derived from
 *    this software without specअगरic prior written permission.
 *
 * Alternatively, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2 as published by the Free
 * Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY सूचीECT, INसूचीECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#अगर_अघोषित _TIPC_SUBSCR_H
#घोषणा _TIPC_SUBSCR_H

#समावेश "topsrv.h"

#घोषणा TIPC_MAX_SUBSCR         65535
#घोषणा TIPC_MAX_PUBL           65535

काष्ठा खुलाation;
काष्ठा tipc_subscription;
काष्ठा tipc_conn;

/**
 * काष्ठा tipc_subscription - TIPC network topology subscription object
 * @s: host-endian copy of the user subscription
 * @evt: ढाँचा क्रम events generated by subscription
 * @kref: reference count क्रम this subscription
 * @net: network namespace associated with subscription
 * @समयr: समयr governing subscription duration (optional)
 * @service_list: adjacent subscriptions in name sequence's subscription list
 * @sub_list: adjacent subscriptions in subscriber's subscription list
 * @conid: connection identअगरier of topology server
 * @inactive: true अगर this subscription is inactive
 * @lock: serialize up/करोwn and समयr events
 */
काष्ठा tipc_subscription अणु
	काष्ठा tipc_subscr s;
	काष्ठा tipc_event evt;
	काष्ठा kref kref;
	काष्ठा net *net;
	काष्ठा समयr_list समयr;
	काष्ठा list_head service_list;
	काष्ठा list_head sub_list;
	पूर्णांक conid;
	bool inactive;
	spinlock_t lock;
पूर्ण;

काष्ठा tipc_subscription *tipc_sub_subscribe(काष्ठा net *net,
					     काष्ठा tipc_subscr *s,
					     पूर्णांक conid);
व्योम tipc_sub_unsubscribe(काष्ठा tipc_subscription *sub);
व्योम tipc_sub_report_overlap(काष्ठा tipc_subscription *sub,
			     काष्ठा खुलाation *p,
			     u32 event, bool must);

पूर्णांक __net_init tipc_topsrv_init_net(काष्ठा net *net);
व्योम __net_निकास tipc_topsrv_निकास_net(काष्ठा net *net);

व्योम tipc_sub_put(काष्ठा tipc_subscription *subscription);
व्योम tipc_sub_get(काष्ठा tipc_subscription *subscription);

#घोषणा TIPC_FILTER_MASK (TIPC_SUB_PORTS | TIPC_SUB_SERVICE | TIPC_SUB_CANCEL)

/* tipc_sub_पढ़ो - वापस field_ of काष्ठा sub_ in host endian क्रमmat
 */
#घोषणा tipc_sub_पढ़ो(sub_, field_)					\
	(अणु								\
		काष्ठा tipc_subscr *sub__ = sub_;			\
		u32 val__ = (sub__)->field_;				\
		पूर्णांक swap_ = !((sub__)->filter & TIPC_FILTER_MASK);	\
		(swap_ ? swab32(val__) : val__);			\
	पूर्ण)

/* tipc_sub_ग_लिखो - ग_लिखो val_ to field_ of काष्ठा sub_ in user endian क्रमmat
 */
#घोषणा tipc_sub_ग_लिखो(sub_, field_, val_)				\
	(अणु								\
		काष्ठा tipc_subscr *sub__ = sub_;			\
		u32 val__ = val_;					\
		पूर्णांक swap_ = !((sub__)->filter & TIPC_FILTER_MASK);	\
		(sub__)->field_ = swap_ ? swab32(val__) : val__;	\
	पूर्ण)

/* tipc_evt_ग_लिखो - ग_लिखो val_ to field_ of काष्ठा evt_ in user endian क्रमmat
 */
#घोषणा tipc_evt_ग_लिखो(evt_, field_, val_)				\
	(अणु								\
		काष्ठा tipc_event *evt__ = evt_;			\
		u32 val__ = val_;					\
		पूर्णांक swap_ = !((evt__)->s.filter & (TIPC_FILTER_MASK));	\
		(evt__)->field_ = swap_ ? swab32(val__) : val__;	\
	पूर्ण)

#पूर्ण_अगर
