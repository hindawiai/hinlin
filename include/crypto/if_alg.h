<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0-or-later */
/*
 * अगर_alg: User-space algorithm पूर्णांकerface
 *
 * Copyright (c) 2010 Herbert Xu <herbert@gonकरोr.apana.org.au>
 */

#अगर_अघोषित _CRYPTO_IF_ALG_H
#घोषणा _CRYPTO_IF_ALG_H

#समावेश <linux/compiler.h>
#समावेश <linux/completion.h>
#समावेश <linux/अगर_alg.h>
#समावेश <linux/scatterlist.h>
#समावेश <linux/types.h>
#समावेश <linux/atomic.h>
#समावेश <net/sock.h>

#समावेश <crypto/aead.h>
#समावेश <crypto/skcipher.h>

#घोषणा ALG_MAX_PAGES			16

काष्ठा crypto_async_request;

काष्ठा alg_sock अणु
	/* काष्ठा sock must be the first member of काष्ठा alg_sock */
	काष्ठा sock sk;

	काष्ठा sock *parent;

	atomic_t refcnt;
	atomic_t nokey_refcnt;

	स्थिर काष्ठा af_alg_type *type;
	व्योम *निजी;
पूर्ण;

काष्ठा af_alg_control अणु
	काष्ठा af_alg_iv *iv;
	पूर्णांक op;
	अचिन्हित पूर्णांक aead_assoclen;
पूर्ण;

काष्ठा af_alg_type अणु
	व्योम *(*bind)(स्थिर अक्षर *name, u32 type, u32 mask);
	व्योम (*release)(व्योम *निजी);
	पूर्णांक (*setkey)(व्योम *निजी, स्थिर u8 *key, अचिन्हित पूर्णांक keylen);
	पूर्णांक (*setentropy)(व्योम *निजी, sockptr_t entropy, अचिन्हित पूर्णांक len);
	पूर्णांक (*accept)(व्योम *निजी, काष्ठा sock *sk);
	पूर्णांक (*accept_nokey)(व्योम *निजी, काष्ठा sock *sk);
	पूर्णांक (*setauthsize)(व्योम *निजी, अचिन्हित पूर्णांक authsize);

	काष्ठा proto_ops *ops;
	काष्ठा proto_ops *ops_nokey;
	काष्ठा module *owner;
	अक्षर name[14];
पूर्ण;

काष्ठा af_alg_sgl अणु
	काष्ठा scatterlist sg[ALG_MAX_PAGES + 1];
	काष्ठा page *pages[ALG_MAX_PAGES];
	अचिन्हित पूर्णांक npages;
पूर्ण;

/* TX SGL entry */
काष्ठा af_alg_tsgl अणु
	काष्ठा list_head list;
	अचिन्हित पूर्णांक cur;		/* Last processed SG entry */
	काष्ठा scatterlist sg[];	/* Array of SGs क्रमming the SGL */
पूर्ण;

#घोषणा MAX_SGL_ENTS ((4096 - माप(काष्ठा af_alg_tsgl)) / \
		      माप(काष्ठा scatterlist) - 1)

/* RX SGL entry */
काष्ठा af_alg_rsgl अणु
	काष्ठा af_alg_sgl sgl;
	काष्ठा list_head list;
	माप_प्रकार sg_num_bytes;		/* Bytes of data in that SGL */
पूर्ण;

/**
 * काष्ठा af_alg_async_req - definition of crypto request
 * @iocb:		IOCB क्रम AIO operations
 * @sk:			Socket the request is associated with
 * @first_rsgl:		First RX SG
 * @last_rsgl:		Poपूर्णांकer to last RX SG
 * @rsgl_list:		Track RX SGs
 * @tsgl:		Private, per request TX SGL of buffers to process
 * @tsgl_entries:	Number of entries in priv. TX SGL
 * @outlen:		Number of output bytes generated by crypto op
 * @areqlen:		Length of this data काष्ठाure
 * @cra_u:		Cipher request
 */
काष्ठा af_alg_async_req अणु
	काष्ठा kiocb *iocb;
	काष्ठा sock *sk;

	काष्ठा af_alg_rsgl first_rsgl;
	काष्ठा af_alg_rsgl *last_rsgl;
	काष्ठा list_head rsgl_list;

	काष्ठा scatterlist *tsgl;
	अचिन्हित पूर्णांक tsgl_entries;

	अचिन्हित पूर्णांक outlen;
	अचिन्हित पूर्णांक areqlen;

	जोड़ अणु
		काष्ठा aead_request aead_req;
		काष्ठा skcipher_request skcipher_req;
	पूर्ण cra_u;

	/* req ctx trails this काष्ठा */
पूर्ण;

/**
 * काष्ठा af_alg_ctx - definition of the crypto context
 *
 * The crypto context tracks the input data during the lअगरeसमय of an AF_ALG
 * socket.
 *
 * @tsgl_list:		Link to TX SGL
 * @iv:			IV क्रम cipher operation
 * @aead_assoclen:	Length of AAD क्रम AEAD cipher operations
 * @completion:		Work queue क्रम synchronous operation
 * @used:		TX bytes sent to kernel. This variable is used to
 *			ensure that user space cannot cause the kernel
 *			to allocate too much memory in sendmsg operation.
 * @rcvused:		Total RX bytes to be filled by kernel. This variable
 *			is used to ensure user space cannot cause the kernel
 *			to allocate too much memory in a recvmsg operation.
 * @more:		More data to be expected from user space?
 * @merge:		Shall new data from user space be merged पूर्णांकo existing
 *			SG?
 * @enc:		Cryptographic operation to be perक्रमmed when
 *			recvmsg is invoked.
 * @init:		True अगर metadata has been sent.
 * @len:		Length of memory allocated क्रम this data काष्ठाure.
 */
काष्ठा af_alg_ctx अणु
	काष्ठा list_head tsgl_list;

	व्योम *iv;
	माप_प्रकार aead_assoclen;

	काष्ठा crypto_रुको रुको;

	माप_प्रकार used;
	atomic_t rcvused;

	bool more;
	bool merge;
	bool enc;
	bool init;

	अचिन्हित पूर्णांक len;
पूर्ण;

पूर्णांक af_alg_रेजिस्टर_type(स्थिर काष्ठा af_alg_type *type);
पूर्णांक af_alg_unरेजिस्टर_type(स्थिर काष्ठा af_alg_type *type);

पूर्णांक af_alg_release(काष्ठा socket *sock);
व्योम af_alg_release_parent(काष्ठा sock *sk);
पूर्णांक af_alg_accept(काष्ठा sock *sk, काष्ठा socket *newsock, bool kern);

पूर्णांक af_alg_make_sg(काष्ठा af_alg_sgl *sgl, काष्ठा iov_iter *iter, पूर्णांक len);
व्योम af_alg_मुक्त_sg(काष्ठा af_alg_sgl *sgl);

अटल अंतरभूत काष्ठा alg_sock *alg_sk(काष्ठा sock *sk)
अणु
	वापस (काष्ठा alg_sock *)sk;
पूर्ण

/**
 * Size of available buffer क्रम sending data from user space to kernel.
 *
 * @sk socket of connection to user space
 * @वापस number of bytes still available
 */
अटल अंतरभूत पूर्णांक af_alg_sndbuf(काष्ठा sock *sk)
अणु
	काष्ठा alg_sock *ask = alg_sk(sk);
	काष्ठा af_alg_ctx *ctx = ask->निजी;

	वापस max_t(पूर्णांक, max_t(पूर्णांक, sk->sk_sndbuf & PAGE_MASK, PAGE_SIZE) -
			  ctx->used, 0);
पूर्ण

/**
 * Can the send buffer still be written to?
 *
 * @sk socket of connection to user space
 * @वापस true => writable, false => not writable
 */
अटल अंतरभूत bool af_alg_writable(काष्ठा sock *sk)
अणु
	वापस PAGE_SIZE <= af_alg_sndbuf(sk);
पूर्ण

/**
 * Size of available buffer used by kernel क्रम the RX user space operation.
 *
 * @sk socket of connection to user space
 * @वापस number of bytes still available
 */
अटल अंतरभूत पूर्णांक af_alg_rcvbuf(काष्ठा sock *sk)
अणु
	काष्ठा alg_sock *ask = alg_sk(sk);
	काष्ठा af_alg_ctx *ctx = ask->निजी;

	वापस max_t(पूर्णांक, max_t(पूर्णांक, sk->sk_rcvbuf & PAGE_MASK, PAGE_SIZE) -
		     atomic_पढ़ो(&ctx->rcvused), 0);
पूर्ण

/**
 * Can the RX buffer still be written to?
 *
 * @sk socket of connection to user space
 * @वापस true => writable, false => not writable
 */
अटल अंतरभूत bool af_alg_पढ़ोable(काष्ठा sock *sk)
अणु
	वापस PAGE_SIZE <= af_alg_rcvbuf(sk);
पूर्ण

अचिन्हित पूर्णांक af_alg_count_tsgl(काष्ठा sock *sk, माप_प्रकार bytes, माप_प्रकार offset);
व्योम af_alg_pull_tsgl(काष्ठा sock *sk, माप_प्रकार used, काष्ठा scatterlist *dst,
		      माप_प्रकार dst_offset);
व्योम af_alg_wmem_wakeup(काष्ठा sock *sk);
पूर्णांक af_alg_रुको_क्रम_data(काष्ठा sock *sk, अचिन्हित flags, अचिन्हित min);
पूर्णांक af_alg_sendmsg(काष्ठा socket *sock, काष्ठा msghdr *msg, माप_प्रकार size,
		   अचिन्हित पूर्णांक ivsize);
sमाप_प्रकार af_alg_sendpage(काष्ठा socket *sock, काष्ठा page *page,
			पूर्णांक offset, माप_प्रकार size, पूर्णांक flags);
व्योम af_alg_मुक्त_resources(काष्ठा af_alg_async_req *areq);
व्योम af_alg_async_cb(काष्ठा crypto_async_request *_req, पूर्णांक err);
__poll_t af_alg_poll(काष्ठा file *file, काष्ठा socket *sock,
			 poll_table *रुको);
काष्ठा af_alg_async_req *af_alg_alloc_areq(काष्ठा sock *sk,
					   अचिन्हित पूर्णांक areqlen);
पूर्णांक af_alg_get_rsgl(काष्ठा sock *sk, काष्ठा msghdr *msg, पूर्णांक flags,
		    काष्ठा af_alg_async_req *areq, माप_प्रकार maxsize,
		    माप_प्रकार *outlen);

#पूर्ण_अगर	/* _CRYPTO_IF_ALG_H */
