<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0-or-later */
/*
 * AEAD: Authenticated Encryption with Associated Data
 * 
 * Copyright (c) 2007-2015 Herbert Xu <herbert@gonकरोr.apana.org.au>
 */

#अगर_अघोषित _CRYPTO_AEAD_H
#घोषणा _CRYPTO_AEAD_H

#समावेश <linux/crypto.h>
#समावेश <linux/kernel.h>
#समावेश <linux/slab.h>

/**
 * DOC: Authenticated Encryption With Associated Data (AEAD) Cipher API
 *
 * The AEAD cipher API is used with the ciphers of type CRYPTO_ALG_TYPE_AEAD
 * (listed as type "aead" in /proc/crypto)
 *
 * The most prominent examples क्रम this type of encryption is GCM and CCM.
 * However, the kernel supports other types of AEAD ciphers which are defined
 * with the following cipher string:
 *
 *	authenc(keyed message digest, block cipher)
 *
 * For example: authenc(hmac(sha256), cbc(aes))
 *
 * The example code provided क्रम the symmetric key cipher operation
 * applies here as well. Naturally all *skcipher* symbols must be exchanged
 * the *aead* pendants discussed in the following. In addition, क्रम the AEAD
 * operation, the aead_request_set_ad function must be used to set the
 * poपूर्णांकer to the associated data memory location beक्रमe perक्रमming the
 * encryption or decryption operation. In हाल of an encryption, the associated
 * data memory is filled during the encryption operation. For decryption, the
 * associated data memory must contain data that is used to verअगरy the पूर्णांकegrity
 * of the decrypted data. Another deviation from the asynchronous block cipher
 * operation is that the caller should explicitly check क्रम -EBADMSG of the
 * crypto_aead_decrypt. That error indicates an authentication error, i.e.
 * a breach in the पूर्णांकegrity of the message. In essence, that -EBADMSG error
 * code is the key bonus an AEAD cipher has over "standard" block chaining
 * modes.
 *
 * Memory Structure:
 *
 * The source scatterlist must contain the concatenation of
 * associated data || plaपूर्णांकext or ciphertext.
 *
 * The destination scatterlist has the same layout, except that the plaपूर्णांकext
 * (resp. ciphertext) will grow (resp. shrink) by the authentication tag size
 * during encryption (resp. decryption).
 *
 * In-place encryption/decryption is enabled by using the same scatterlist
 * poपूर्णांकer क्रम both the source and destination.
 *
 * Even in the out-of-place हाल, space must be reserved in the destination क्रम
 * the associated data, even though it won't be written to.  This makes the
 * in-place and out-of-place हालs more consistent.  It is permissible क्रम the
 * "destination" associated data to alias the "source" associated data.
 *
 * As with the other scatterlist crypto APIs, zero-length scatterlist elements
 * are not allowed in the used part of the scatterlist.  Thus, अगर there is no
 * associated data, the first element must poपूर्णांक to the plaपूर्णांकext/ciphertext.
 *
 * To meet the needs of IPsec, a special quirk applies to rfc4106, rfc4309,
 * rfc4543, and rfc7539esp ciphers.  For these ciphers, the final 'ivsize' bytes
 * of the associated data buffer must contain a second copy of the IV.  This is
 * in addition to the copy passed to aead_request_set_crypt().  These two IV
 * copies must not dअगरfer; dअगरferent implementations of the same algorithm may
 * behave dअगरferently in that हाल.  Note that the algorithm might not actually
 * treat the IV as associated data; nevertheless the length passed to
 * aead_request_set_ad() must include it.
 */

काष्ठा crypto_aead;

/**
 *	काष्ठा aead_request - AEAD request
 *	@base: Common attributes क्रम async crypto requests
 *	@assoclen: Length in bytes of associated data क्रम authentication
 *	@cryptlen: Length of data to be encrypted or decrypted
 *	@iv: Initialisation vector
 *	@src: Source data
 *	@dst: Destination data
 *	@__ctx: Start of निजी context data
 */
काष्ठा aead_request अणु
	काष्ठा crypto_async_request base;

	अचिन्हित पूर्णांक assoclen;
	अचिन्हित पूर्णांक cryptlen;

	u8 *iv;

	काष्ठा scatterlist *src;
	काष्ठा scatterlist *dst;

	व्योम *__ctx[] CRYPTO_MINALIGN_ATTR;
पूर्ण;

/**
 * काष्ठा aead_alg - AEAD cipher definition
 * @maxauthsize: Set the maximum authentication tag size supported by the
 *		 transक्रमmation. A transक्रमmation may support smaller tag sizes.
 *		 As the authentication tag is a message digest to ensure the
 *		 पूर्णांकegrity of the encrypted data, a consumer typically wants the
 *		 largest authentication tag possible as defined by this
 *		 variable.
 * @setauthsize: Set authentication size क्रम the AEAD transक्रमmation. This
 *		 function is used to specअगरy the consumer requested size of the
 * 		 authentication tag to be either generated by the transक्रमmation
 *		 during encryption or the size of the authentication tag to be
 *		 supplied during the decryption operation. This function is also
 *		 responsible क्रम checking the authentication tag size क्रम
 *		 validity.
 * @setkey: see काष्ठा skcipher_alg
 * @encrypt: see काष्ठा skcipher_alg
 * @decrypt: see काष्ठा skcipher_alg
 * @ivsize: see काष्ठा skcipher_alg
 * @chunksize: see काष्ठा skcipher_alg
 * @init: Initialize the cryptographic transक्रमmation object. This function
 *	  is used to initialize the cryptographic transक्रमmation object.
 *	  This function is called only once at the instantiation समय, right
 *	  after the transक्रमmation context was allocated. In हाल the
 *	  cryptographic hardware has some special requirements which need to
 *	  be handled by software, this function shall check क्रम the precise
 *	  requirement of the transक्रमmation and put any software fallbacks
 *	  in place.
 * @निकास: Deinitialize the cryptographic transक्रमmation object. This is a
 *	  counterpart to @init, used to हटाओ various changes set in
 *	  @init.
 * @base: Definition of a generic crypto cipher algorithm.
 *
 * All fields except @ivsize is mandatory and must be filled.
 */
काष्ठा aead_alg अणु
	पूर्णांक (*setkey)(काष्ठा crypto_aead *tfm, स्थिर u8 *key,
	              अचिन्हित पूर्णांक keylen);
	पूर्णांक (*setauthsize)(काष्ठा crypto_aead *tfm, अचिन्हित पूर्णांक authsize);
	पूर्णांक (*encrypt)(काष्ठा aead_request *req);
	पूर्णांक (*decrypt)(काष्ठा aead_request *req);
	पूर्णांक (*init)(काष्ठा crypto_aead *tfm);
	व्योम (*निकास)(काष्ठा crypto_aead *tfm);

	अचिन्हित पूर्णांक ivsize;
	अचिन्हित पूर्णांक maxauthsize;
	अचिन्हित पूर्णांक chunksize;

	काष्ठा crypto_alg base;
पूर्ण;

काष्ठा crypto_aead अणु
	अचिन्हित पूर्णांक authsize;
	अचिन्हित पूर्णांक reqsize;

	काष्ठा crypto_tfm base;
पूर्ण;

अटल अंतरभूत काष्ठा crypto_aead *__crypto_aead_cast(काष्ठा crypto_tfm *tfm)
अणु
	वापस container_of(tfm, काष्ठा crypto_aead, base);
पूर्ण

/**
 * crypto_alloc_aead() - allocate AEAD cipher handle
 * @alg_name: is the cra_name / name or cra_driver_name / driver name of the
 *	     AEAD cipher
 * @type: specअगरies the type of the cipher
 * @mask: specअगरies the mask क्रम the cipher
 *
 * Allocate a cipher handle क्रम an AEAD. The वापसed काष्ठा
 * crypto_aead is the cipher handle that is required क्रम any subsequent
 * API invocation क्रम that AEAD.
 *
 * Return: allocated cipher handle in हाल of success; IS_ERR() is true in हाल
 *	   of an error, PTR_ERR() वापसs the error code.
 */
काष्ठा crypto_aead *crypto_alloc_aead(स्थिर अक्षर *alg_name, u32 type, u32 mask);

अटल अंतरभूत काष्ठा crypto_tfm *crypto_aead_tfm(काष्ठा crypto_aead *tfm)
अणु
	वापस &tfm->base;
पूर्ण

/**
 * crypto_मुक्त_aead() - zeroize and मुक्त aead handle
 * @tfm: cipher handle to be मुक्तd
 *
 * If @tfm is a शून्य or error poपूर्णांकer, this function करोes nothing.
 */
अटल अंतरभूत व्योम crypto_मुक्त_aead(काष्ठा crypto_aead *tfm)
अणु
	crypto_destroy_tfm(tfm, crypto_aead_tfm(tfm));
पूर्ण

अटल अंतरभूत स्थिर अक्षर *crypto_aead_driver_name(काष्ठा crypto_aead *tfm)
अणु
	वापस crypto_tfm_alg_driver_name(crypto_aead_tfm(tfm));
पूर्ण

अटल अंतरभूत काष्ठा aead_alg *crypto_aead_alg(काष्ठा crypto_aead *tfm)
अणु
	वापस container_of(crypto_aead_tfm(tfm)->__crt_alg,
			    काष्ठा aead_alg, base);
पूर्ण

अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_alg_ivsize(काष्ठा aead_alg *alg)
अणु
	वापस alg->ivsize;
पूर्ण

/**
 * crypto_aead_ivsize() - obtain IV size
 * @tfm: cipher handle
 *
 * The size of the IV क्रम the aead referenced by the cipher handle is
 * वापसed. This IV size may be zero अगर the cipher करोes not need an IV.
 *
 * Return: IV size in bytes
 */
अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_ivsize(काष्ठा crypto_aead *tfm)
अणु
	वापस crypto_aead_alg_ivsize(crypto_aead_alg(tfm));
पूर्ण

/**
 * crypto_aead_authsize() - obtain maximum authentication data size
 * @tfm: cipher handle
 *
 * The maximum size of the authentication data क्रम the AEAD cipher referenced
 * by the AEAD cipher handle is वापसed. The authentication data size may be
 * zero अगर the cipher implements a hard-coded maximum.
 *
 * The authentication data may also be known as "tag value".
 *
 * Return: authentication data size / tag size in bytes
 */
अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_authsize(काष्ठा crypto_aead *tfm)
अणु
	वापस tfm->authsize;
पूर्ण

अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_alg_maxauthsize(काष्ठा aead_alg *alg)
अणु
	वापस alg->maxauthsize;
पूर्ण

अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_maxauthsize(काष्ठा crypto_aead *aead)
अणु
	वापस crypto_aead_alg_maxauthsize(crypto_aead_alg(aead));
पूर्ण

/**
 * crypto_aead_blocksize() - obtain block size of cipher
 * @tfm: cipher handle
 *
 * The block size क्रम the AEAD referenced with the cipher handle is वापसed.
 * The caller may use that inक्रमmation to allocate appropriate memory क्रम the
 * data वापसed by the encryption or decryption operation
 *
 * Return: block size of cipher
 */
अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_blocksize(काष्ठा crypto_aead *tfm)
अणु
	वापस crypto_tfm_alg_blocksize(crypto_aead_tfm(tfm));
पूर्ण

अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_alignmask(काष्ठा crypto_aead *tfm)
अणु
	वापस crypto_tfm_alg_alignmask(crypto_aead_tfm(tfm));
पूर्ण

अटल अंतरभूत u32 crypto_aead_get_flags(काष्ठा crypto_aead *tfm)
अणु
	वापस crypto_tfm_get_flags(crypto_aead_tfm(tfm));
पूर्ण

अटल अंतरभूत व्योम crypto_aead_set_flags(काष्ठा crypto_aead *tfm, u32 flags)
अणु
	crypto_tfm_set_flags(crypto_aead_tfm(tfm), flags);
पूर्ण

अटल अंतरभूत व्योम crypto_aead_clear_flags(काष्ठा crypto_aead *tfm, u32 flags)
अणु
	crypto_tfm_clear_flags(crypto_aead_tfm(tfm), flags);
पूर्ण

/**
 * crypto_aead_setkey() - set key क्रम cipher
 * @tfm: cipher handle
 * @key: buffer holding the key
 * @keylen: length of the key in bytes
 *
 * The caller provided key is set क्रम the AEAD referenced by the cipher
 * handle.
 *
 * Note, the key length determines the cipher type. Many block ciphers implement
 * dअगरferent cipher modes depending on the key size, such as AES-128 vs AES-192
 * vs. AES-256. When providing a 16 byte key क्रम an AES cipher handle, AES-128
 * is perक्रमmed.
 *
 * Return: 0 अगर the setting of the key was successful; < 0 अगर an error occurred
 */
पूर्णांक crypto_aead_setkey(काष्ठा crypto_aead *tfm,
		       स्थिर u8 *key, अचिन्हित पूर्णांक keylen);

/**
 * crypto_aead_setauthsize() - set authentication data size
 * @tfm: cipher handle
 * @authsize: size of the authentication data / tag in bytes
 *
 * Set the authentication data size / tag size. AEAD requires an authentication
 * tag (or MAC) in addition to the associated data.
 *
 * Return: 0 अगर the setting of the key was successful; < 0 अगर an error occurred
 */
पूर्णांक crypto_aead_setauthsize(काष्ठा crypto_aead *tfm, अचिन्हित पूर्णांक authsize);

अटल अंतरभूत काष्ठा crypto_aead *crypto_aead_reqtfm(काष्ठा aead_request *req)
अणु
	वापस __crypto_aead_cast(req->base.tfm);
पूर्ण

/**
 * crypto_aead_encrypt() - encrypt plaपूर्णांकext
 * @req: reference to the aead_request handle that holds all inक्रमmation
 *	 needed to perक्रमm the cipher operation
 *
 * Encrypt plaपूर्णांकext data using the aead_request handle. That data काष्ठाure
 * and how it is filled with data is discussed with the aead_request_*
 * functions.
 *
 * IMPORTANT NOTE The encryption operation creates the authentication data /
 *		  tag. That data is concatenated with the created ciphertext.
 *		  The ciphertext memory size is thereक्रमe the given number of
 *		  block cipher blocks + the size defined by the
 *		  crypto_aead_setauthsize invocation. The caller must ensure
 *		  that sufficient memory is available क्रम the ciphertext and
 *		  the authentication tag.
 *
 * Return: 0 अगर the cipher operation was successful; < 0 अगर an error occurred
 */
पूर्णांक crypto_aead_encrypt(काष्ठा aead_request *req);

/**
 * crypto_aead_decrypt() - decrypt ciphertext
 * @req: reference to the aead_request handle that holds all inक्रमmation
 *	 needed to perक्रमm the cipher operation
 *
 * Decrypt ciphertext data using the aead_request handle. That data काष्ठाure
 * and how it is filled with data is discussed with the aead_request_*
 * functions.
 *
 * IMPORTANT NOTE The caller must concatenate the ciphertext followed by the
 *		  authentication data / tag. That authentication data / tag
 *		  must have the size defined by the crypto_aead_setauthsize
 *		  invocation.
 *
 *
 * Return: 0 अगर the cipher operation was successful; -EBADMSG: The AEAD
 *	   cipher operation perक्रमms the authentication of the data during the
 *	   decryption operation. Thereक्रमe, the function वापसs this error अगर
 *	   the authentication of the ciphertext was unsuccessful (i.e. the
 *	   पूर्णांकegrity of the ciphertext or the associated data was violated);
 *	   < 0 अगर an error occurred.
 */
पूर्णांक crypto_aead_decrypt(काष्ठा aead_request *req);

/**
 * DOC: Asynchronous AEAD Request Handle
 *
 * The aead_request data काष्ठाure contains all poपूर्णांकers to data required क्रम
 * the AEAD cipher operation. This includes the cipher handle (which can be
 * used by multiple aead_request instances), poपूर्णांकer to plaपूर्णांकext and
 * ciphertext, asynchronous callback function, etc. It acts as a handle to the
 * aead_request_* API calls in a similar way as AEAD handle to the
 * crypto_aead_* API calls.
 */

/**
 * crypto_aead_reqsize() - obtain size of the request data काष्ठाure
 * @tfm: cipher handle
 *
 * Return: number of bytes
 */
अटल अंतरभूत अचिन्हित पूर्णांक crypto_aead_reqsize(काष्ठा crypto_aead *tfm)
अणु
	वापस tfm->reqsize;
पूर्ण

/**
 * aead_request_set_tfm() - update cipher handle reference in request
 * @req: request handle to be modअगरied
 * @tfm: cipher handle that shall be added to the request handle
 *
 * Allow the caller to replace the existing aead handle in the request
 * data काष्ठाure with a dअगरferent one.
 */
अटल अंतरभूत व्योम aead_request_set_tfm(काष्ठा aead_request *req,
					काष्ठा crypto_aead *tfm)
अणु
	req->base.tfm = crypto_aead_tfm(tfm);
पूर्ण

/**
 * aead_request_alloc() - allocate request data काष्ठाure
 * @tfm: cipher handle to be रेजिस्टरed with the request
 * @gfp: memory allocation flag that is handed to kदो_स्मृति by the API call.
 *
 * Allocate the request data काष्ठाure that must be used with the AEAD
 * encrypt and decrypt API calls. During the allocation, the provided aead
 * handle is रेजिस्टरed in the request data काष्ठाure.
 *
 * Return: allocated request handle in हाल of success, or शून्य अगर out of memory
 */
अटल अंतरभूत काष्ठा aead_request *aead_request_alloc(काष्ठा crypto_aead *tfm,
						      gfp_t gfp)
अणु
	काष्ठा aead_request *req;

	req = kदो_स्मृति(माप(*req) + crypto_aead_reqsize(tfm), gfp);

	अगर (likely(req))
		aead_request_set_tfm(req, tfm);

	वापस req;
पूर्ण

/**
 * aead_request_मुक्त() - zeroize and मुक्त request data काष्ठाure
 * @req: request data काष्ठाure cipher handle to be मुक्तd
 */
अटल अंतरभूत व्योम aead_request_मुक्त(काष्ठा aead_request *req)
अणु
	kमुक्त_sensitive(req);
पूर्ण

/**
 * aead_request_set_callback() - set asynchronous callback function
 * @req: request handle
 * @flags: specअगरy zero or an ORing of the flags
 *	   CRYPTO_TFM_REQ_MAY_BACKLOG the request queue may back log and
 *	   increase the रुको queue beyond the initial maximum size;
 *	   CRYPTO_TFM_REQ_MAY_SLEEP the request processing may sleep
 * @compl: callback function poपूर्णांकer to be रेजिस्टरed with the request handle
 * @data: The data poपूर्णांकer refers to memory that is not used by the kernel
 *	  crypto API, but provided to the callback function क्रम it to use. Here,
 *	  the caller can provide a reference to memory the callback function can
 *	  operate on. As the callback function is invoked asynchronously to the
 *	  related functionality, it may need to access data काष्ठाures of the
 *	  related functionality which can be referenced using this poपूर्णांकer. The
 *	  callback function can access the memory via the "data" field in the
 *	  crypto_async_request data काष्ठाure provided to the callback function.
 *
 * Setting the callback function that is triggered once the cipher operation
 * completes
 *
 * The callback function is रेजिस्टरed with the aead_request handle and
 * must comply with the following ढाँचा::
 *
 *	व्योम callback_function(काष्ठा crypto_async_request *req, पूर्णांक error)
 */
अटल अंतरभूत व्योम aead_request_set_callback(काष्ठा aead_request *req,
					     u32 flags,
					     crypto_completion_t compl,
					     व्योम *data)
अणु
	req->base.complete = compl;
	req->base.data = data;
	req->base.flags = flags;
पूर्ण

/**
 * aead_request_set_crypt - set data buffers
 * @req: request handle
 * @src: source scatter / gather list
 * @dst: destination scatter / gather list
 * @cryptlen: number of bytes to process from @src
 * @iv: IV क्रम the cipher operation which must comply with the IV size defined
 *      by crypto_aead_ivsize()
 *
 * Setting the source data and destination data scatter / gather lists which
 * hold the associated data concatenated with the plaपूर्णांकext or ciphertext. See
 * below क्रम the authentication tag.
 *
 * For encryption, the source is treated as the plaपूर्णांकext and the
 * destination is the ciphertext. For a decryption operation, the use is
 * reversed - the source is the ciphertext and the destination is the plaपूर्णांकext.
 *
 * The memory काष्ठाure क्रम cipher operation has the following काष्ठाure:
 *
 * - AEAD encryption input:  assoc data || plaपूर्णांकext
 * - AEAD encryption output: assoc data || cipherntext || auth tag
 * - AEAD decryption input:  assoc data || ciphertext || auth tag
 * - AEAD decryption output: assoc data || plaपूर्णांकext
 *
 * Albeit the kernel requires the presence of the AAD buffer, however,
 * the kernel करोes not fill the AAD buffer in the output हाल. If the
 * caller wants to have that data buffer filled, the caller must either
 * use an in-place cipher operation (i.e. same memory location क्रम
 * input/output memory location).
 */
अटल अंतरभूत व्योम aead_request_set_crypt(काष्ठा aead_request *req,
					  काष्ठा scatterlist *src,
					  काष्ठा scatterlist *dst,
					  अचिन्हित पूर्णांक cryptlen, u8 *iv)
अणु
	req->src = src;
	req->dst = dst;
	req->cryptlen = cryptlen;
	req->iv = iv;
पूर्ण

/**
 * aead_request_set_ad - set associated data inक्रमmation
 * @req: request handle
 * @assoclen: number of bytes in associated data
 *
 * Setting the AD inक्रमmation.  This function sets the length of
 * the associated data.
 */
अटल अंतरभूत व्योम aead_request_set_ad(काष्ठा aead_request *req,
				       अचिन्हित पूर्णांक assoclen)
अणु
	req->assoclen = assoclen;
पूर्ण

#पूर्ण_अगर	/* _CRYPTO_AEAD_H */
