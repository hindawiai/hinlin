<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0-only */
/*
 * Copyright (c) 1999-2002 Vojtech Pavlik
 */
#अगर_अघोषित _INPUT_H
#घोषणा _INPUT_H

#समावेश <linux/समय.स>
#समावेश <linux/list.h>
#समावेश <uapi/linux/input.h>
/* Implementation details, userspace should not care about these */
#घोषणा ABS_MT_FIRST		ABS_MT_TOUCH_MAJOR
#घोषणा ABS_MT_LAST		ABS_MT_TOOL_Y

/*
 * In-kernel definitions.
 */

#समावेश <linux/device.h>
#समावेश <linux/fs.h>
#समावेश <linux/समयr.h>
#समावेश <linux/mod_devicetable.h>

काष्ठा input_dev_poller;

/**
 * काष्ठा input_value - input value representation
 * @type: type of value (EV_KEY, EV_ABS, etc)
 * @code: the value code
 * @value: the value
 */
काष्ठा input_value अणु
	__u16 type;
	__u16 code;
	__s32 value;
पूर्ण;

क्रमागत input_घड़ी_प्रकारype अणु
	INPUT_CLK_REAL = 0,
	INPUT_CLK_MONO,
	INPUT_CLK_BOOT,
	INPUT_CLK_MAX
पूर्ण;

/**
 * काष्ठा input_dev - represents an input device
 * @name: name of the device
 * @phys: physical path to the device in the प्रणाली hierarchy
 * @uniq: unique identअगरication code क्रम the device (अगर device has it)
 * @id: id of the device (काष्ठा input_id)
 * @propbit: biपंचांगap of device properties and quirks
 * @evbit: biपंचांगap of types of events supported by the device (EV_KEY,
 *	EV_REL, etc.)
 * @keybit: biपंचांगap of keys/buttons this device has
 * @relbit: biपंचांगap of relative axes क्रम the device
 * @असलbit: biपंचांगap of असलolute axes क्रम the device
 * @mscbit: biपंचांगap of miscellaneous events supported by the device
 * @ledbit: biपंचांगap of leds present on the device
 * @sndbit: biपंचांगap of sound effects supported by the device
 * @ffbit: biपंचांगap of क्रमce feedback effects supported by the device
 * @swbit: biपंचांगap of चयनes present on the device
 * @hपूर्णांक_events_per_packet: average number of events generated by the
 *	device in a packet (between EV_SYN/SYN_REPORT events). Used by
 *	event handlers to estimate size of the buffer needed to hold
 *	events.
 * @keycodemax: size of keycode table
 * @keycodesize: size of elements in keycode table
 * @keycode: map of scancodes to keycodes क्रम this device
 * @getkeycode: optional legacy method to retrieve current keymap.
 * @setkeycode: optional method to alter current keymap, used to implement
 *	sparse keymaps. If not supplied शेष mechanism will be used.
 *	The method is being called जबतक holding event_lock and thus must
 *	not sleep
 * @ff: क्रमce feedback काष्ठाure associated with the device अगर device
 *	supports क्रमce feedback effects
 * @poller: poller काष्ठाure associated with the device अगर device is
 *	set up to use polling mode
 * @repeat_key: stores key code of the last key pressed; used to implement
 *	software स्वतःrepeat
 * @समयr: समयr क्रम software स्वतःrepeat
 * @rep: current values क्रम स्वतःrepeat parameters (delay, rate)
 * @mt: poपूर्णांकer to multitouch state
 * @असलinfo: array of &काष्ठा input_असलinfo elements holding inक्रमmation
 *	about असलolute axes (current value, min, max, flat, fuzz,
 *	resolution)
 * @key: reflects current state of device's keys/buttons
 * @led: reflects current state of device's LEDs
 * @snd: reflects current state of sound effects
 * @sw: reflects current state of device's चयनes
 * @खोलो: this method is called when the very first user calls
 *	input_खोलो_device(). The driver must prepare the device
 *	to start generating events (start polling thपढ़ो,
 *	request an IRQ, submit URB, etc.). The meaning of खोलो() is
 *	to start providing events to the input core.
 * @बंद: this method is called when the very last user calls
 *	input_बंद_device(). The meaning of बंद() is to stop
 *	providing events to the input core.
 * @flush: purges the device. Most commonly used to get rid of क्रमce
 *	feedback effects loaded पूर्णांकo the device when disconnecting
 *	from it
 * @event: event handler क्रम events sent _to_ the device, like EV_LED
 *	or EV_SND. The device is expected to carry out the requested
 *	action (turn on a LED, play sound, etc.) The call is रक्षित
 *	by @event_lock and must not sleep
 * @grab: input handle that currently has the device grabbed (via
 *	EVIOCGRAB ioctl). When a handle grअसल a device it becomes sole
 *	recipient क्रम all input events coming from the device
 * @event_lock: this spinlock is taken when input core receives
 *	and processes a new event क्रम the device (in input_event()).
 *	Code that accesses and/or modअगरies parameters of a device
 *	(such as keymap or असलmin, असलmax, असलfuzz, etc.) after device
 *	has been रेजिस्टरed with input core must take this lock.
 * @mutex: serializes calls to खोलो(), बंद() and flush() methods
 * @users: stores number of users (input handlers) that खोलोed this
 *	device. It is used by input_खोलो_device() and input_बंद_device()
 *	to make sure that dev->खोलो() is only called when the first
 *	user खोलोs device and dev->बंद() is called when the very
 *	last user बंदs the device
 * @going_away: marks devices that are in a middle of unरेजिस्टरing and
 *	causes input_खोलो_device*() fail with -ENODEV.
 * @dev: driver model's view of this device
 * @h_list: list of input handles associated with the device. When
 *	accessing the list dev->mutex must be held
 * @node: used to place the device onto input_dev_list
 * @num_vals: number of values queued in the current frame
 * @max_vals: maximum number of values queued in a frame
 * @vals: array of values queued in the current frame
 * @devres_managed: indicates that devices is managed with devres framework
 *	and needs not be explicitly unरेजिस्टरed or मुक्तd.
 * @बारtamp: storage क्रम a बारtamp set by input_set_बारtamp called
 *  by a driver
 * @inhibited: indicates that the input device is inhibited. If that is
 * the हाल then input core ignores any events generated by the device.
 * Device's बंद() is called when it is being inhibited and its खोलो()
 * is called when it is being uninhibited.
 */
काष्ठा input_dev अणु
	स्थिर अक्षर *name;
	स्थिर अक्षर *phys;
	स्थिर अक्षर *uniq;
	काष्ठा input_id id;

	अचिन्हित दीर्घ propbit[BITS_TO_LONGS(INPUT_PROP_CNT)];

	अचिन्हित दीर्घ evbit[BITS_TO_LONGS(EV_CNT)];
	अचिन्हित दीर्घ keybit[BITS_TO_LONGS(KEY_CNT)];
	अचिन्हित दीर्घ relbit[BITS_TO_LONGS(REL_CNT)];
	अचिन्हित दीर्घ असलbit[BITS_TO_LONGS(ABS_CNT)];
	अचिन्हित दीर्घ mscbit[BITS_TO_LONGS(MSC_CNT)];
	अचिन्हित दीर्घ ledbit[BITS_TO_LONGS(LED_CNT)];
	अचिन्हित दीर्घ sndbit[BITS_TO_LONGS(SND_CNT)];
	अचिन्हित दीर्घ ffbit[BITS_TO_LONGS(FF_CNT)];
	अचिन्हित दीर्घ swbit[BITS_TO_LONGS(SW_CNT)];

	अचिन्हित पूर्णांक hपूर्णांक_events_per_packet;

	अचिन्हित पूर्णांक keycodemax;
	अचिन्हित पूर्णांक keycodesize;
	व्योम *keycode;

	पूर्णांक (*setkeycode)(काष्ठा input_dev *dev,
			  स्थिर काष्ठा input_keymap_entry *ke,
			  अचिन्हित पूर्णांक *old_keycode);
	पूर्णांक (*getkeycode)(काष्ठा input_dev *dev,
			  काष्ठा input_keymap_entry *ke);

	काष्ठा ff_device *ff;

	काष्ठा input_dev_poller *poller;

	अचिन्हित पूर्णांक repeat_key;
	काष्ठा समयr_list समयr;

	पूर्णांक rep[REP_CNT];

	काष्ठा input_mt *mt;

	काष्ठा input_असलinfo *असलinfo;

	अचिन्हित दीर्घ key[BITS_TO_LONGS(KEY_CNT)];
	अचिन्हित दीर्घ led[BITS_TO_LONGS(LED_CNT)];
	अचिन्हित दीर्घ snd[BITS_TO_LONGS(SND_CNT)];
	अचिन्हित दीर्घ sw[BITS_TO_LONGS(SW_CNT)];

	पूर्णांक (*खोलो)(काष्ठा input_dev *dev);
	व्योम (*बंद)(काष्ठा input_dev *dev);
	पूर्णांक (*flush)(काष्ठा input_dev *dev, काष्ठा file *file);
	पूर्णांक (*event)(काष्ठा input_dev *dev, अचिन्हित पूर्णांक type, अचिन्हित पूर्णांक code, पूर्णांक value);

	काष्ठा input_handle __rcu *grab;

	spinlock_t event_lock;
	काष्ठा mutex mutex;

	अचिन्हित पूर्णांक users;
	bool going_away;

	काष्ठा device dev;

	काष्ठा list_head	h_list;
	काष्ठा list_head	node;

	अचिन्हित पूर्णांक num_vals;
	अचिन्हित पूर्णांक max_vals;
	काष्ठा input_value *vals;

	bool devres_managed;

	kसमय_प्रकार बारtamp[INPUT_CLK_MAX];

	bool inhibited;
पूर्ण;
#घोषणा to_input_dev(d) container_of(d, काष्ठा input_dev, dev)

/*
 * Verअगरy that we are in sync with input_device_id mod_devicetable.h #घोषणाs
 */

#अगर EV_MAX != INPUT_DEVICE_ID_EV_MAX
#त्रुटि "EV_MAX and INPUT_DEVICE_ID_EV_MAX do not match"
#पूर्ण_अगर

#अगर KEY_MIN_INTERESTING != INPUT_DEVICE_ID_KEY_MIN_INTERESTING
#त्रुटि "KEY_MIN_INTERESTING and INPUT_DEVICE_ID_KEY_MIN_INTERESTING do not match"
#पूर्ण_अगर

#अगर KEY_MAX != INPUT_DEVICE_ID_KEY_MAX
#त्रुटि "KEY_MAX and INPUT_DEVICE_ID_KEY_MAX do not match"
#पूर्ण_अगर

#अगर REL_MAX != INPUT_DEVICE_ID_REL_MAX
#त्रुटि "REL_MAX and INPUT_DEVICE_ID_REL_MAX do not match"
#पूर्ण_अगर

#अगर ABS_MAX != INPUT_DEVICE_ID_ABS_MAX
#त्रुटि "ABS_MAX and INPUT_DEVICE_ID_ABS_MAX do not match"
#पूर्ण_अगर

#अगर MSC_MAX != INPUT_DEVICE_ID_MSC_MAX
#त्रुटि "MSC_MAX and INPUT_DEVICE_ID_MSC_MAX do not match"
#पूर्ण_अगर

#अगर LED_MAX != INPUT_DEVICE_ID_LED_MAX
#त्रुटि "LED_MAX and INPUT_DEVICE_ID_LED_MAX do not match"
#पूर्ण_अगर

#अगर SND_MAX != INPUT_DEVICE_ID_SND_MAX
#त्रुटि "SND_MAX and INPUT_DEVICE_ID_SND_MAX do not match"
#पूर्ण_अगर

#अगर FF_MAX != INPUT_DEVICE_ID_FF_MAX
#त्रुटि "FF_MAX and INPUT_DEVICE_ID_FF_MAX do not match"
#पूर्ण_अगर

#अगर SW_MAX != INPUT_DEVICE_ID_SW_MAX
#त्रुटि "SW_MAX and INPUT_DEVICE_ID_SW_MAX do not match"
#पूर्ण_अगर

#अगर INPUT_PROP_MAX != INPUT_DEVICE_ID_PROP_MAX
#त्रुटि "INPUT_PROP_MAX and INPUT_DEVICE_ID_PROP_MAX do not match"
#पूर्ण_अगर

#घोषणा INPUT_DEVICE_ID_MATCH_DEVICE \
	(INPUT_DEVICE_ID_MATCH_BUS | INPUT_DEVICE_ID_MATCH_VENDOR | INPUT_DEVICE_ID_MATCH_PRODUCT)
#घोषणा INPUT_DEVICE_ID_MATCH_DEVICE_AND_VERSION \
	(INPUT_DEVICE_ID_MATCH_DEVICE | INPUT_DEVICE_ID_MATCH_VERSION)

काष्ठा input_handle;

/**
 * काष्ठा input_handler - implements one of पूर्णांकerfaces क्रम input devices
 * @निजी: driver-specअगरic data
 * @event: event handler. This method is being called by input core with
 *	पूर्णांकerrupts disabled and dev->event_lock spinlock held and so
 *	it may not sleep
 * @events: event sequence handler. This method is being called by
 *	input core with पूर्णांकerrupts disabled and dev->event_lock
 *	spinlock held and so it may not sleep
 * @filter: similar to @event; separates normal event handlers from
 *	"filters".
 * @match: called after comparing device's id with handler's id_table
 *	to perक्रमm fine-grained matching between device and handler
 * @connect: called when attaching a handler to an input device
 * @disconnect: disconnects a handler from input device
 * @start: starts handler क्रम given handle. This function is called by
 *	input core right after connect() method and also when a process
 *	that "grabbed" a device releases it
 * @legacy_minors: set to %true by drivers using legacy minor ranges
 * @minor: beginning of range of 32 legacy minors क्रम devices this driver
 *	can provide
 * @name: name of the handler, to be shown in /proc/bus/input/handlers
 * @id_table: poपूर्णांकer to a table of input_device_ids this driver can
 *	handle
 * @h_list: list of input handles associated with the handler
 * @node: क्रम placing the driver onto input_handler_list
 *
 * Input handlers attach to input devices and create input handles. There
 * are likely several handlers attached to any given input device at the
 * same समय. All of them will get their copy of input event generated by
 * the device.
 *
 * The very same काष्ठाure is used to implement input filters. Input core
 * allows filters to run first and will not pass event to regular handlers
 * अगर any of the filters indicate that the event should be filtered (by
 * वापसing %true from their filter() method).
 *
 * Note that input core serializes calls to connect() and disconnect()
 * methods.
 */
काष्ठा input_handler अणु

	व्योम *निजी;

	व्योम (*event)(काष्ठा input_handle *handle, अचिन्हित पूर्णांक type, अचिन्हित पूर्णांक code, पूर्णांक value);
	व्योम (*events)(काष्ठा input_handle *handle,
		       स्थिर काष्ठा input_value *vals, अचिन्हित पूर्णांक count);
	bool (*filter)(काष्ठा input_handle *handle, अचिन्हित पूर्णांक type, अचिन्हित पूर्णांक code, पूर्णांक value);
	bool (*match)(काष्ठा input_handler *handler, काष्ठा input_dev *dev);
	पूर्णांक (*connect)(काष्ठा input_handler *handler, काष्ठा input_dev *dev, स्थिर काष्ठा input_device_id *id);
	व्योम (*disconnect)(काष्ठा input_handle *handle);
	व्योम (*start)(काष्ठा input_handle *handle);

	bool legacy_minors;
	पूर्णांक minor;
	स्थिर अक्षर *name;

	स्थिर काष्ठा input_device_id *id_table;

	काष्ठा list_head	h_list;
	काष्ठा list_head	node;
पूर्ण;

/**
 * काष्ठा input_handle - links input device with an input handler
 * @निजी: handler-specअगरic data
 * @खोलो: counter showing whether the handle is 'open', i.e. should deliver
 *	events from its device
 * @name: name given to the handle by handler that created it
 * @dev: input device the handle is attached to
 * @handler: handler that works with the device through this handle
 * @d_node: used to put the handle on device's list of attached handles
 * @h_node: used to put the handle on handler's list of handles from which
 *	it माला_लो events
 */
काष्ठा input_handle अणु

	व्योम *निजी;

	पूर्णांक खोलो;
	स्थिर अक्षर *name;

	काष्ठा input_dev *dev;
	काष्ठा input_handler *handler;

	काष्ठा list_head	d_node;
	काष्ठा list_head	h_node;
पूर्ण;

काष्ठा input_dev __must_check *input_allocate_device(व्योम);
काष्ठा input_dev __must_check *devm_input_allocate_device(काष्ठा device *);
व्योम input_मुक्त_device(काष्ठा input_dev *dev);

अटल अंतरभूत काष्ठा input_dev *input_get_device(काष्ठा input_dev *dev)
अणु
	वापस dev ? to_input_dev(get_device(&dev->dev)) : शून्य;
पूर्ण

अटल अंतरभूत व्योम input_put_device(काष्ठा input_dev *dev)
अणु
	अगर (dev)
		put_device(&dev->dev);
पूर्ण

अटल अंतरभूत व्योम *input_get_drvdata(काष्ठा input_dev *dev)
अणु
	वापस dev_get_drvdata(&dev->dev);
पूर्ण

अटल अंतरभूत व्योम input_set_drvdata(काष्ठा input_dev *dev, व्योम *data)
अणु
	dev_set_drvdata(&dev->dev, data);
पूर्ण

पूर्णांक __must_check input_रेजिस्टर_device(काष्ठा input_dev *);
व्योम input_unरेजिस्टर_device(काष्ठा input_dev *);

व्योम input_reset_device(काष्ठा input_dev *);

पूर्णांक input_setup_polling(काष्ठा input_dev *dev,
			व्योम (*poll_fn)(काष्ठा input_dev *dev));
व्योम input_set_poll_पूर्णांकerval(काष्ठा input_dev *dev, अचिन्हित पूर्णांक पूर्णांकerval);
व्योम input_set_min_poll_पूर्णांकerval(काष्ठा input_dev *dev, अचिन्हित पूर्णांक पूर्णांकerval);
व्योम input_set_max_poll_पूर्णांकerval(काष्ठा input_dev *dev, अचिन्हित पूर्णांक पूर्णांकerval);
पूर्णांक input_get_poll_पूर्णांकerval(काष्ठा input_dev *dev);

पूर्णांक __must_check input_रेजिस्टर_handler(काष्ठा input_handler *);
व्योम input_unरेजिस्टर_handler(काष्ठा input_handler *);

पूर्णांक __must_check input_get_new_minor(पूर्णांक legacy_base, अचिन्हित पूर्णांक legacy_num,
				     bool allow_dynamic);
व्योम input_मुक्त_minor(अचिन्हित पूर्णांक minor);

पूर्णांक input_handler_क्रम_each_handle(काष्ठा input_handler *, व्योम *data,
				  पूर्णांक (*fn)(काष्ठा input_handle *, व्योम *));

पूर्णांक input_रेजिस्टर_handle(काष्ठा input_handle *);
व्योम input_unरेजिस्टर_handle(काष्ठा input_handle *);

पूर्णांक input_grab_device(काष्ठा input_handle *);
व्योम input_release_device(काष्ठा input_handle *);

पूर्णांक input_खोलो_device(काष्ठा input_handle *);
व्योम input_बंद_device(काष्ठा input_handle *);

पूर्णांक input_flush_device(काष्ठा input_handle *handle, काष्ठा file *file);

व्योम input_set_बारtamp(काष्ठा input_dev *dev, kसमय_प्रकार बारtamp);
kसमय_प्रकार *input_get_बारtamp(काष्ठा input_dev *dev);

व्योम input_event(काष्ठा input_dev *dev, अचिन्हित पूर्णांक type, अचिन्हित पूर्णांक code, पूर्णांक value);
व्योम input_inject_event(काष्ठा input_handle *handle, अचिन्हित पूर्णांक type, अचिन्हित पूर्णांक code, पूर्णांक value);

अटल अंतरभूत व्योम input_report_key(काष्ठा input_dev *dev, अचिन्हित पूर्णांक code, पूर्णांक value)
अणु
	input_event(dev, EV_KEY, code, !!value);
पूर्ण

अटल अंतरभूत व्योम input_report_rel(काष्ठा input_dev *dev, अचिन्हित पूर्णांक code, पूर्णांक value)
अणु
	input_event(dev, EV_REL, code, value);
पूर्ण

अटल अंतरभूत व्योम input_report_असल(काष्ठा input_dev *dev, अचिन्हित पूर्णांक code, पूर्णांक value)
अणु
	input_event(dev, EV_ABS, code, value);
पूर्ण

अटल अंतरभूत व्योम input_report_ff_status(काष्ठा input_dev *dev, अचिन्हित पूर्णांक code, पूर्णांक value)
अणु
	input_event(dev, EV_FF_STATUS, code, value);
पूर्ण

अटल अंतरभूत व्योम input_report_चयन(काष्ठा input_dev *dev, अचिन्हित पूर्णांक code, पूर्णांक value)
अणु
	input_event(dev, EV_SW, code, !!value);
पूर्ण

अटल अंतरभूत व्योम input_sync(काष्ठा input_dev *dev)
अणु
	input_event(dev, EV_SYN, SYN_REPORT, 0);
पूर्ण

अटल अंतरभूत व्योम input_mt_sync(काष्ठा input_dev *dev)
अणु
	input_event(dev, EV_SYN, SYN_MT_REPORT, 0);
पूर्ण

व्योम input_set_capability(काष्ठा input_dev *dev, अचिन्हित पूर्णांक type, अचिन्हित पूर्णांक code);

/**
 * input_set_events_per_packet - tell handlers about the driver event rate
 * @dev: the input device used by the driver
 * @n_events: the average number of events between calls to input_sync()
 *
 * If the event rate sent from a device is unusually large, use this
 * function to set the expected event rate. This will allow handlers
 * to set up an appropriate buffer size क्रम the event stream, in order
 * to minimize inक्रमmation loss.
 */
अटल अंतरभूत व्योम input_set_events_per_packet(काष्ठा input_dev *dev, पूर्णांक n_events)
अणु
	dev->hपूर्णांक_events_per_packet = n_events;
पूर्ण

व्योम input_alloc_असलinfo(काष्ठा input_dev *dev);
व्योम input_set_असल_params(काष्ठा input_dev *dev, अचिन्हित पूर्णांक axis,
			  पूर्णांक min, पूर्णांक max, पूर्णांक fuzz, पूर्णांक flat);

#घोषणा INPUT_GENERATE_ABS_ACCESSORS(_suffix, _item)			\
अटल अंतरभूत पूर्णांक input_असल_get_##_suffix(काष्ठा input_dev *dev,	\
					  अचिन्हित पूर्णांक axis)		\
अणु									\
	वापस dev->असलinfo ? dev->असलinfo[axis]._item : 0;		\
पूर्ण									\
									\
अटल अंतरभूत व्योम input_असल_set_##_suffix(काष्ठा input_dev *dev,	\
					   अचिन्हित पूर्णांक axis, पूर्णांक val)	\
अणु									\
	input_alloc_असलinfo(dev);					\
	अगर (dev->असलinfo)						\
		dev->असलinfo[axis]._item = val;				\
पूर्ण

INPUT_GENERATE_ABS_ACCESSORS(val, value)
INPUT_GENERATE_ABS_ACCESSORS(min, minimum)
INPUT_GENERATE_ABS_ACCESSORS(max, maximum)
INPUT_GENERATE_ABS_ACCESSORS(fuzz, fuzz)
INPUT_GENERATE_ABS_ACCESSORS(flat, flat)
INPUT_GENERATE_ABS_ACCESSORS(res, resolution)

पूर्णांक input_scancode_to_scalar(स्थिर काष्ठा input_keymap_entry *ke,
			     अचिन्हित पूर्णांक *scancode);

पूर्णांक input_get_keycode(काष्ठा input_dev *dev, काष्ठा input_keymap_entry *ke);
पूर्णांक input_set_keycode(काष्ठा input_dev *dev,
		      स्थिर काष्ठा input_keymap_entry *ke);

bool input_match_device_id(स्थिर काष्ठा input_dev *dev,
			   स्थिर काष्ठा input_device_id *id);

व्योम input_enable_softrepeat(काष्ठा input_dev *dev, पूर्णांक delay, पूर्णांक period);

bool input_device_enabled(काष्ठा input_dev *dev);

बाह्य काष्ठा class input_class;

/**
 * काष्ठा ff_device - क्रमce-feedback part of an input device
 * @upload: Called to upload an new effect पूर्णांकo device
 * @erase: Called to erase an effect from device
 * @playback: Called to request device to start playing specअगरied effect
 * @set_gain: Called to set specअगरied gain
 * @set_स्वतःcenter: Called to स्वतः-center device
 * @destroy: called by input core when parent input device is being
 *	destroyed
 * @निजी: driver-specअगरic data, will be मुक्तd स्वतःmatically
 * @ffbit: biपंचांगap of क्रमce feedback capabilities truly supported by
 *	device (not emulated like ones in input_dev->ffbit)
 * @mutex: mutex क्रम serializing access to the device
 * @max_effects: maximum number of effects supported by device
 * @effects: poपूर्णांकer to an array of effects currently loaded पूर्णांकo device
 * @effect_owners: array of effect owners; when file handle owning
 *	an effect माला_लो बंदd the effect is स्वतःmatically erased
 *
 * Every क्रमce-feedback device must implement upload() and playback()
 * methods; erase() is optional. set_gain() and set_स्वतःcenter() need
 * only be implemented अगर driver sets up FF_GAIN and FF_AUTOCENTER
 * bits.
 *
 * Note that playback(), set_gain() and set_स्वतःcenter() are called with
 * dev->event_lock spinlock held and पूर्णांकerrupts off and thus may not
 * sleep.
 */
काष्ठा ff_device अणु
	पूर्णांक (*upload)(काष्ठा input_dev *dev, काष्ठा ff_effect *effect,
		      काष्ठा ff_effect *old);
	पूर्णांक (*erase)(काष्ठा input_dev *dev, पूर्णांक effect_id);

	पूर्णांक (*playback)(काष्ठा input_dev *dev, पूर्णांक effect_id, पूर्णांक value);
	व्योम (*set_gain)(काष्ठा input_dev *dev, u16 gain);
	व्योम (*set_स्वतःcenter)(काष्ठा input_dev *dev, u16 magnitude);

	व्योम (*destroy)(काष्ठा ff_device *);

	व्योम *निजी;

	अचिन्हित दीर्घ ffbit[BITS_TO_LONGS(FF_CNT)];

	काष्ठा mutex mutex;

	पूर्णांक max_effects;
	काष्ठा ff_effect *effects;
	काष्ठा file *effect_owners[];
पूर्ण;

पूर्णांक input_ff_create(काष्ठा input_dev *dev, अचिन्हित पूर्णांक max_effects);
व्योम input_ff_destroy(काष्ठा input_dev *dev);

पूर्णांक input_ff_event(काष्ठा input_dev *dev, अचिन्हित पूर्णांक type, अचिन्हित पूर्णांक code, पूर्णांक value);

पूर्णांक input_ff_upload(काष्ठा input_dev *dev, काष्ठा ff_effect *effect, काष्ठा file *file);
पूर्णांक input_ff_erase(काष्ठा input_dev *dev, पूर्णांक effect_id, काष्ठा file *file);
पूर्णांक input_ff_flush(काष्ठा input_dev *dev, काष्ठा file *file);

पूर्णांक input_ff_create_memless(काष्ठा input_dev *dev, व्योम *data,
		पूर्णांक (*play_effect)(काष्ठा input_dev *, व्योम *, काष्ठा ff_effect *));

#पूर्ण_अगर
