<शैली गुरु>
/* SPDX-License-Identअगरier: (GPL-2.0 WITH Linux-syscall-note) */
/* Copyright (C) B.A.T.M.A.N. contributors:
 *
 * Marek Lindner, Simon Wunderlich
 */

#अगर_अघोषित _UAPI_LINUX_BATADV_PACKET_H_
#घोषणा _UAPI_LINUX_BATADV_PACKET_H_

#समावेश <यंत्र/byteorder.h>
#समावेश <linux/अगर_ether.h>
#समावेश <linux/types.h>

/**
 * batadv_tp_is_error() - Check throughput meter वापस code क्रम error
 * @n: throughput meter वापस code
 *
 * Return: 0 when not error was detected, != 0 otherwise
 */
#घोषणा batadv_tp_is_error(n) ((__u8)(n) > 127 ? 1 : 0)

/**
 * क्रमागत batadv_packettype - types क्रम baपंचांगan-adv encapsulated packets
 * @BATADV_IV_OGM: originator messages क्रम B.A.T.M.A.N. IV
 * @BATADV_BCAST: broadcast packets carrying broadcast payload
 * @BATADV_CODED: network coded packets
 * @BATADV_ELP: echo location packets क्रम B.A.T.M.A.N. V
 * @BATADV_OGM2: originator messages क्रम B.A.T.M.A.N. V
 *
 * @BATADV_UNICAST: unicast packets carrying unicast payload traffic
 * @BATADV_UNICAST_FRAG: unicast packets carrying a fragment of the original
 *     payload packet
 * @BATADV_UNICAST_4ADDR: unicast packet including the originator address of
 *     the sender
 * @BATADV_ICMP: unicast packet like IP ICMP used क्रम ping or traceroute
 * @BATADV_UNICAST_TVLV: unicast packet carrying TVLV containers
 */
क्रमागत batadv_packettype अणु
	/* 0x00 - 0x3f: local packets or special rules क्रम handling */
	BATADV_IV_OGM           = 0x00,
	BATADV_BCAST            = 0x01,
	BATADV_CODED            = 0x02,
	BATADV_ELP		= 0x03,
	BATADV_OGM2		= 0x04,
	/* 0x40 - 0x7f: unicast */
#घोषणा BATADV_UNICAST_MIN     0x40
	BATADV_UNICAST          = 0x40,
	BATADV_UNICAST_FRAG     = 0x41,
	BATADV_UNICAST_4ADDR    = 0x42,
	BATADV_ICMP             = 0x43,
	BATADV_UNICAST_TVLV     = 0x44,
#घोषणा BATADV_UNICAST_MAX     0x7f
	/* 0x80 - 0xff: reserved */
पूर्ण;

/**
 * क्रमागत batadv_subtype - packet subtype क्रम unicast4addr
 * @BATADV_P_DATA: user payload
 * @BATADV_P_DAT_DHT_GET: DHT request message
 * @BATADV_P_DAT_DHT_PUT: DHT store message
 * @BATADV_P_DAT_CACHE_REPLY: ARP reply generated by DAT
 */
क्रमागत batadv_subtype अणु
	BATADV_P_DATA			= 0x01,
	BATADV_P_DAT_DHT_GET		= 0x02,
	BATADV_P_DAT_DHT_PUT		= 0x03,
	BATADV_P_DAT_CACHE_REPLY	= 0x04,
पूर्ण;

/* this file is included by batctl which needs these defines */
#घोषणा BATADV_COMPAT_VERSION 15

/**
 * क्रमागत batadv_iv_flags - flags used in B.A.T.M.A.N. IV OGM packets
 * @BATADV_NOT_BEST_NEXT_HOP: flag is set when the ogm packet is क्रमwarded and
 *  was previously received from someone other than the best neighbor.
 * @BATADV_PRIMARIES_FIRST_HOP: flag unused.
 * @BATADV_सूचीECTLINK: flag is क्रम the first hop or अगर rebroadcasted from a
 *     one hop neighbor on the पूर्णांकerface where it was originally received.
 */
क्रमागत batadv_iv_flags अणु
	BATADV_NOT_BEST_NEXT_HOP   = 1UL << 0,
	BATADV_PRIMARIES_FIRST_HOP = 1UL << 1,
	BATADV_सूचीECTLINK          = 1UL << 2,
पूर्ण;

/**
 * क्रमागत batadv_icmp_packettype - ICMP message types
 * @BATADV_ECHO_REPLY: success reply to BATADV_ECHO_REQUEST
 * @BATADV_DESTINATION_UNREACHABLE: failure when route to destination not found
 * @BATADV_ECHO_REQUEST: request BATADV_ECHO_REPLY from destination
 * @BATADV_TTL_EXCEEDED: error after BATADV_ECHO_REQUEST traversed too many hops
 * @BATADV_PARAMETER_PROBLEM: वापस code क्रम malक्रमmed messages
 * @BATADV_TP: throughput meter packet
 */
क्रमागत batadv_icmp_packettype अणु
	BATADV_ECHO_REPLY	       = 0,
	BATADV_DESTINATION_UNREACHABLE = 3,
	BATADV_ECHO_REQUEST	       = 8,
	BATADV_TTL_EXCEEDED	       = 11,
	BATADV_PARAMETER_PROBLEM       = 12,
	BATADV_TP		       = 15,
पूर्ण;

/**
 * क्रमागत batadv_mcast_flags - flags क्रम multicast capabilities and settings
 * @BATADV_MCAST_WANT_ALL_UNSNOOPABLES: we want all packets destined क्रम
 *  224.0.0.0/24 or ff02::1
 * @BATADV_MCAST_WANT_ALL_IPV4: we want all IPv4 multicast packets
 *  (both link-local and routable ones)
 * @BATADV_MCAST_WANT_ALL_IPV6: we want all IPv6 multicast packets
 *  (both link-local and routable ones)
 * @BATADV_MCAST_WANT_NO_RTR4: we have no IPv4 multicast router and thereक्रमe
 * only need routable IPv4 multicast packets we चिन्हित up क्रम explicitly
 * @BATADV_MCAST_WANT_NO_RTR6: we have no IPv6 multicast router and thereक्रमe
 * only need routable IPv6 multicast packets we चिन्हित up क्रम explicitly
 */
क्रमागत batadv_mcast_flags अणु
	BATADV_MCAST_WANT_ALL_UNSNOOPABLES	= 1UL << 0,
	BATADV_MCAST_WANT_ALL_IPV4		= 1UL << 1,
	BATADV_MCAST_WANT_ALL_IPV6		= 1UL << 2,
	BATADV_MCAST_WANT_NO_RTR4		= 1UL << 3,
	BATADV_MCAST_WANT_NO_RTR6		= 1UL << 4,
पूर्ण;

/* tt data subtypes */
#घोषणा BATADV_TT_DATA_TYPE_MASK 0x0F

/**
 * क्रमागत batadv_tt_data_flags - flags क्रम tt data tvlv
 * @BATADV_TT_OGM_DIFF: TT dअगरf propagated through OGM
 * @BATADV_TT_REQUEST: TT request message
 * @BATADV_TT_RESPONSE: TT response message
 * @BATADV_TT_FULL_TABLE: contains full table to replace existing table
 */
क्रमागत batadv_tt_data_flags अणु
	BATADV_TT_OGM_DIFF   = 1UL << 0,
	BATADV_TT_REQUEST    = 1UL << 1,
	BATADV_TT_RESPONSE   = 1UL << 2,
	BATADV_TT_FULL_TABLE = 1UL << 4,
पूर्ण;

/**
 * क्रमागत batadv_vlan_flags - flags क्रम the four MSB of any vlan ID field
 * @BATADV_VLAN_HAS_TAG: whether the field contains a valid vlan tag or not
 */
क्रमागत batadv_vlan_flags अणु
	BATADV_VLAN_HAS_TAG	= 1UL << 15,
पूर्ण;

/**
 * क्रमागत batadv_bla_claimframe - claim frame types क्रम the bridge loop aव्योमance
 * @BATADV_CLAIM_TYPE_CLAIM: claim of a client mac address
 * @BATADV_CLAIM_TYPE_UNCLAIM: unclaim of a client mac address
 * @BATADV_CLAIM_TYPE_ANNOUNCE: announcement of backbone with current crc
 * @BATADV_CLAIM_TYPE_REQUEST: request of full claim table
 * @BATADV_CLAIM_TYPE_LOOPDETECT: mesh-traversing loop detect packet
 */
क्रमागत batadv_bla_claimframe अणु
	BATADV_CLAIM_TYPE_CLAIM		= 0x00,
	BATADV_CLAIM_TYPE_UNCLAIM	= 0x01,
	BATADV_CLAIM_TYPE_ANNOUNCE	= 0x02,
	BATADV_CLAIM_TYPE_REQUEST	= 0x03,
	BATADV_CLAIM_TYPE_LOOPDETECT	= 0x04,
पूर्ण;

/**
 * क्रमागत batadv_tvlv_type - tvlv type definitions
 * @BATADV_TVLV_GW: gateway tvlv
 * @BATADV_TVLV_DAT: distributed arp table tvlv
 * @BATADV_TVLV_NC: network coding tvlv
 * @BATADV_TVLV_TT: translation table tvlv
 * @BATADV_TVLV_ROAM: roaming advertisement tvlv
 * @BATADV_TVLV_MCAST: multicast capability tvlv
 */
क्रमागत batadv_tvlv_type अणु
	BATADV_TVLV_GW		= 0x01,
	BATADV_TVLV_DAT		= 0x02,
	BATADV_TVLV_NC		= 0x03,
	BATADV_TVLV_TT		= 0x04,
	BATADV_TVLV_ROAM	= 0x05,
	BATADV_TVLV_MCAST	= 0x06,
पूर्ण;

#आशय pack(2)
/* the destination hardware field in the ARP frame is used to
 * transport the claim type and the group id
 */
काष्ठा batadv_bla_claim_dst अणु
	__u8   magic[3];	/* FF:43:05 */
	__u8   type;		/* bla_claimframe */
	__be16 group;		/* group id */
पूर्ण;

/**
 * काष्ठा batadv_ogm_packet - ogm (routing protocol) packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @flags: contains routing relevant flags - see क्रमागत batadv_iv_flags
 * @seqno: sequence identअगरication
 * @orig: address of the source node
 * @prev_sender: address of the previous sender
 * @reserved: reserved byte क्रम alignment
 * @tq: transmission quality
 * @tvlv_len: length of tvlv data following the ogm header
 */
काष्ठा batadv_ogm_packet अणु
	__u8   packet_type;
	__u8   version;
	__u8   ttl;
	__u8   flags;
	__be32 seqno;
	__u8   orig[ETH_ALEN];
	__u8   prev_sender[ETH_ALEN];
	__u8   reserved;
	__u8   tq;
	__be16 tvlv_len;
पूर्ण;

#घोषणा BATADV_OGM_HLEN माप(काष्ठा batadv_ogm_packet)

/**
 * काष्ठा batadv_ogm2_packet - ogm2 (routing protocol) packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @flags: reserved क्रम routing relevant flags - currently always 0
 * @seqno: sequence number
 * @orig: originator mac address
 * @tvlv_len: length of the appended tvlv buffer (in bytes)
 * @throughput: the currently flooded path throughput
 */
काष्ठा batadv_ogm2_packet अणु
	__u8   packet_type;
	__u8   version;
	__u8   ttl;
	__u8   flags;
	__be32 seqno;
	__u8   orig[ETH_ALEN];
	__be16 tvlv_len;
	__be32 throughput;
पूर्ण;

#घोषणा BATADV_OGM2_HLEN माप(काष्ठा batadv_ogm2_packet)

/**
 * काष्ठा batadv_elp_packet - elp (neighbor discovery) packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @orig: originator mac address
 * @seqno: sequence number
 * @elp_पूर्णांकerval: currently used ELP sending पूर्णांकerval in ms
 */
काष्ठा batadv_elp_packet अणु
	__u8   packet_type;
	__u8   version;
	__u8   orig[ETH_ALEN];
	__be32 seqno;
	__be32 elp_पूर्णांकerval;
पूर्ण;

#घोषणा BATADV_ELP_HLEN माप(काष्ठा batadv_elp_packet)

/**
 * काष्ठा batadv_icmp_header - common members among all the ICMP packets
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @msg_type: ICMP packet type
 * @dst: address of the destination node
 * @orig: address of the source node
 * @uid: local ICMP socket identअगरier
 * @align: not used - useful क्रम alignment purposes only
 *
 * This काष्ठाure is used क्रम ICMP packet parsing only and it is never sent
 * over the wire. The alignment field at the end is there to ensure that
 * members are padded the same way as they are in real packets.
 */
काष्ठा batadv_icmp_header अणु
	__u8 packet_type;
	__u8 version;
	__u8 ttl;
	__u8 msg_type; /* see ICMP message types above */
	__u8 dst[ETH_ALEN];
	__u8 orig[ETH_ALEN];
	__u8 uid;
	__u8 align[3];
पूर्ण;

/**
 * काष्ठा batadv_icmp_packet - ICMP packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @msg_type: ICMP packet type
 * @dst: address of the destination node
 * @orig: address of the source node
 * @uid: local ICMP socket identअगरier
 * @reserved: not used - useful क्रम alignment
 * @seqno: ICMP sequence number
 */
काष्ठा batadv_icmp_packet अणु
	__u8   packet_type;
	__u8   version;
	__u8   ttl;
	__u8   msg_type; /* see ICMP message types above */
	__u8   dst[ETH_ALEN];
	__u8   orig[ETH_ALEN];
	__u8   uid;
	__u8   reserved;
	__be16 seqno;
पूर्ण;

/**
 * काष्ठा batadv_icmp_tp_packet - ICMP TP Meter packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @msg_type: ICMP packet type
 * @dst: address of the destination node
 * @orig: address of the source node
 * @uid: local ICMP socket identअगरier
 * @subtype: TP packet subtype (see batadv_icmp_tp_subtype)
 * @session: TP session identअगरier
 * @seqno: the TP sequence number
 * @बारtamp: समय when the packet has been sent. This value is filled in a
 *  TP_MSG and echoed back in the next TP_ACK so that the sender can compute the
 *  RTT. Since it is पढ़ो only by the host which wrote it, there is no need to
 *  store it using network order
 */
काष्ठा batadv_icmp_tp_packet अणु
	__u8   packet_type;
	__u8   version;
	__u8   ttl;
	__u8   msg_type; /* see ICMP message types above */
	__u8   dst[ETH_ALEN];
	__u8   orig[ETH_ALEN];
	__u8   uid;
	__u8   subtype;
	__u8   session[2];
	__be32 seqno;
	__be32 बारtamp;
पूर्ण;

/**
 * क्रमागत batadv_icmp_tp_subtype - ICMP TP Meter packet subtypes
 * @BATADV_TP_MSG: Msg from sender to receiver
 * @BATADV_TP_ACK: acknowledgment from receiver to sender
 */
क्रमागत batadv_icmp_tp_subtype अणु
	BATADV_TP_MSG	= 0,
	BATADV_TP_ACK,
पूर्ण;

#घोषणा BATADV_RR_LEN 16

/**
 * काष्ठा batadv_icmp_packet_rr - ICMP RouteRecord packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @msg_type: ICMP packet type
 * @dst: address of the destination node
 * @orig: address of the source node
 * @uid: local ICMP socket identअगरier
 * @rr_cur: number of entries the rr array
 * @seqno: ICMP sequence number
 * @rr: route record array
 */
काष्ठा batadv_icmp_packet_rr अणु
	__u8   packet_type;
	__u8   version;
	__u8   ttl;
	__u8   msg_type; /* see ICMP message types above */
	__u8   dst[ETH_ALEN];
	__u8   orig[ETH_ALEN];
	__u8   uid;
	__u8   rr_cur;
	__be16 seqno;
	__u8   rr[BATADV_RR_LEN][ETH_ALEN];
पूर्ण;

#घोषणा BATADV_ICMP_MAX_PACKET_SIZE	माप(काष्ठा batadv_icmp_packet_rr)

/* All packet headers in front of an ethernet header have to be completely
 * भागisible by 2 but not by 4 to make the payload after the ethernet
 * header again 4 bytes boundary aligned.
 *
 * A packing of 2 is necessary to aव्योम extra padding at the end of the काष्ठा
 * caused by a काष्ठाure member which is larger than two bytes. Otherwise
 * the काष्ठाure would not fulfill the previously mentioned rule to aव्योम the
 * misalignment of the payload after the ethernet header. It may also lead to
 * leakage of inक्रमmation when the padding it not initialized beक्रमe sending.
 */

/**
 * काष्ठा batadv_unicast_packet - unicast packet क्रम network payload
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @ttvn: translation table version number
 * @dest: originator destination of the unicast packet
 */
काष्ठा batadv_unicast_packet अणु
	__u8 packet_type;
	__u8 version;
	__u8 ttl;
	__u8 ttvn; /* destination translation table version number */
	__u8 dest[ETH_ALEN];
	/* "4 bytes boundary + 2 bytes" दीर्घ to make the payload after the
	 * following ethernet header again 4 bytes boundary aligned
	 */
पूर्ण;

/**
 * काष्ठा batadv_unicast_4addr_packet - extended unicast packet
 * @u: common unicast packet header
 * @src: address of the source
 * @subtype: packet subtype
 * @reserved: reserved byte क्रम alignment
 */
काष्ठा batadv_unicast_4addr_packet अणु
	काष्ठा batadv_unicast_packet u;
	__u8 src[ETH_ALEN];
	__u8 subtype;
	__u8 reserved;
	/* "4 bytes boundary + 2 bytes" दीर्घ to make the payload after the
	 * following ethernet header again 4 bytes boundary aligned
	 */
पूर्ण;

/**
 * काष्ठा batadv_frag_packet - fragmented packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @dest: final destination used when routing fragments
 * @orig: originator of the fragment used when merging the packet
 * @no: fragment number within this sequence
 * @priority: priority of frame, from ToS IP precedence or 802.1p
 * @reserved: reserved byte क्रम alignment
 * @seqno: sequence identअगरication
 * @total_size: size of the merged packet
 */
काष्ठा batadv_frag_packet अणु
	__u8   packet_type;
	__u8   version;  /* baपंचांगan version field */
	__u8   ttl;
#अगर defined(__BIG_ENDIAN_BITFIELD)
	__u8   no:4;
	__u8   priority:3;
	__u8   reserved:1;
#या_अगर defined(__LITTLE_ENDIAN_BITFIELD)
	__u8   reserved:1;
	__u8   priority:3;
	__u8   no:4;
#अन्यथा
#त्रुटि "unknown bitfield endianness"
#पूर्ण_अगर
	__u8   dest[ETH_ALEN];
	__u8   orig[ETH_ALEN];
	__be16 seqno;
	__be16 total_size;
पूर्ण;

/**
 * काष्ठा batadv_bcast_packet - broadcast packet क्रम network payload
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @reserved: reserved byte क्रम alignment
 * @seqno: sequence identअगरication
 * @orig: originator of the broadcast packet
 */
काष्ठा batadv_bcast_packet अणु
	__u8   packet_type;
	__u8   version;  /* baपंचांगan version field */
	__u8   ttl;
	__u8   reserved;
	__be32 seqno;
	__u8   orig[ETH_ALEN];
	/* "4 bytes boundary + 2 bytes" दीर्घ to make the payload after the
	 * following ethernet header again 4 bytes boundary aligned
	 */
पूर्ण;

/**
 * काष्ठा batadv_coded_packet - network coded packet
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @first_source: original source of first included packet
 * @first_orig_dest: original destination of first included packet
 * @first_crc: checksum of first included packet
 * @first_ttvn: tt-version number of first included packet
 * @second_ttl: ttl of second packet
 * @second_dest: second receiver of this coded packet
 * @second_source: original source of second included packet
 * @second_orig_dest: original destination of second included packet
 * @second_crc: checksum of second included packet
 * @second_ttvn: tt version number of second included packet
 * @coded_len: length of network coded part of the payload
 */
काष्ठा batadv_coded_packet अणु
	__u8   packet_type;
	__u8   version;  /* baपंचांगan version field */
	__u8   ttl;
	__u8   first_ttvn;
	/* __u8 first_dest[ETH_ALEN]; - saved in mac header destination */
	__u8   first_source[ETH_ALEN];
	__u8   first_orig_dest[ETH_ALEN];
	__be32 first_crc;
	__u8   second_ttl;
	__u8   second_ttvn;
	__u8   second_dest[ETH_ALEN];
	__u8   second_source[ETH_ALEN];
	__u8   second_orig_dest[ETH_ALEN];
	__be32 second_crc;
	__be16 coded_len;
पूर्ण;

/**
 * काष्ठा batadv_unicast_tvlv_packet - generic unicast packet with tvlv payload
 * @packet_type: baपंचांगan-adv packet type, part of the general header
 * @version: baपंचांगan-adv protocol version, part of the general header
 * @ttl: समय to live क्रम this packet, part of the general header
 * @reserved: reserved field (क्रम packet alignment)
 * @src: address of the source
 * @dst: address of the destination
 * @tvlv_len: length of tvlv data following the unicast tvlv header
 * @align: 2 bytes to align the header to a 4 byte boundary
 */
काष्ठा batadv_unicast_tvlv_packet अणु
	__u8   packet_type;
	__u8   version;  /* baपंचांगan version field */
	__u8   ttl;
	__u8   reserved;
	__u8   dst[ETH_ALEN];
	__u8   src[ETH_ALEN];
	__be16 tvlv_len;
	__u16  align;
पूर्ण;

/**
 * काष्ठा batadv_tvlv_hdr - base tvlv header काष्ठा
 * @type: tvlv container type (see batadv_tvlv_type)
 * @version: tvlv container version
 * @len: tvlv container length
 */
काष्ठा batadv_tvlv_hdr अणु
	__u8   type;
	__u8   version;
	__be16 len;
पूर्ण;

/**
 * काष्ठा batadv_tvlv_gateway_data - gateway data propagated through gw tvlv
 *  container
 * @bandwidth_करोwn: advertised uplink करोwnload bandwidth
 * @bandwidth_up: advertised uplink upload bandwidth
 */
काष्ठा batadv_tvlv_gateway_data अणु
	__be32 bandwidth_करोwn;
	__be32 bandwidth_up;
पूर्ण;

/**
 * काष्ठा batadv_tvlv_tt_data - tt data propagated through the tt tvlv container
 * @flags: translation table flags (see batadv_tt_data_flags)
 * @ttvn: translation table version number
 * @num_vlan: number of announced VLANs. In the TVLV this काष्ठा is followed by
 *  one batadv_tvlv_tt_vlan_data object per announced vlan
 */
काष्ठा batadv_tvlv_tt_data अणु
	__u8   flags;
	__u8   ttvn;
	__be16 num_vlan;
पूर्ण;

/**
 * काष्ठा batadv_tvlv_tt_vlan_data - vlan specअगरic tt data propagated through
 *  the tt tvlv container
 * @crc: crc32 checksum of the entries beदीर्घing to this vlan
 * @vid: vlan identअगरier
 * @reserved: unused, useful क्रम alignment purposes
 */
काष्ठा batadv_tvlv_tt_vlan_data अणु
	__be32 crc;
	__be16 vid;
	__u16  reserved;
पूर्ण;

/**
 * काष्ठा batadv_tvlv_tt_change - translation table dअगरf data
 * @flags: status indicators concerning the non-mesh client (see
 *  batadv_tt_client_flags)
 * @reserved: reserved field - useful क्रम alignment purposes only
 * @addr: mac address of non-mesh client that triggered this tt change
 * @vid: VLAN identअगरier
 */
काष्ठा batadv_tvlv_tt_change अणु
	__u8   flags;
	__u8   reserved[3];
	__u8   addr[ETH_ALEN];
	__be16 vid;
पूर्ण;

/**
 * काष्ठा batadv_tvlv_roam_adv - roaming advertisement
 * @client: mac address of roaming client
 * @vid: VLAN identअगरier
 */
काष्ठा batadv_tvlv_roam_adv अणु
	__u8   client[ETH_ALEN];
	__be16 vid;
पूर्ण;

/**
 * काष्ठा batadv_tvlv_mcast_data - payload of a multicast tvlv
 * @flags: multicast flags announced by the orig node
 * @reserved: reserved field
 */
काष्ठा batadv_tvlv_mcast_data अणु
	__u8 flags;
	__u8 reserved[3];
पूर्ण;

#आशय pack()

#पूर्ण_अगर /* _UAPI_LINUX_BATADV_PACKET_H_ */
