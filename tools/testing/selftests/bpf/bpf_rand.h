<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0 */
#अगर_अघोषित __BPF_RAND__
#घोषणा __BPF_RAND__

#समावेश <मानक_निवेशt.h>
#समावेश <मानककोष.स>
#समावेश <समय.स>

अटल अंतरभूत uपूर्णांक64_t bpf_अक्रम_mask(uपूर्णांक64_t mask)
अणु
	वापस (((uपूर्णांक64_t)(uपूर्णांक32_t)अक्रम()) |
	        ((uपूर्णांक64_t)(uपूर्णांक32_t)अक्रम() << 32)) & mask;
पूर्ण

#घोषणा bpf_अक्रम_ux(x, m)			\
अटल अंतरभूत uपूर्णांक64_t bpf_अक्रम_u##x(पूर्णांक shअगरt)	\
अणु						\
	वापस bpf_अक्रम_mask((m)) << shअगरt;	\
पूर्ण

bpf_अक्रम_ux( 8,               0xffULL)
bpf_अक्रम_ux(16,             0xffffULL)
bpf_अक्रम_ux(24,           0xffffffULL)
bpf_अक्रम_ux(32,         0xffffffffULL)
bpf_अक्रम_ux(40,       0xffffffffffULL)
bpf_अक्रम_ux(48,     0xffffffffffffULL)
bpf_अक्रम_ux(56,   0xffffffffffffffULL)
bpf_अक्रम_ux(64, 0xffffffffffffffffULL)

अटल अंतरभूत व्योम bpf_semi_अक्रम_init(व्योम)
अणु
	बेक्रम(समय(शून्य));
पूर्ण

अटल अंतरभूत uपूर्णांक64_t bpf_semi_अक्रम_get(व्योम)
अणु
	चयन (अक्रम() % 39) अणु
	हाल  0: वापस 0x000000ff00000000ULL | bpf_अक्रम_u8(0);
	हाल  1: वापस 0xffffffff00000000ULL | bpf_अक्रम_u16(0);
	हाल  2: वापस 0x00000000ffff0000ULL | bpf_अक्रम_u16(0);
	हाल  3: वापस 0x8000000000000000ULL | bpf_अक्रम_u32(0);
	हाल  4: वापस 0x00000000f0000000ULL | bpf_अक्रम_u32(0);
	हाल  5: वापस 0x0000000100000000ULL | bpf_अक्रम_u24(0);
	हाल  6: वापस 0x800ff00000000000ULL | bpf_अक्रम_u32(0);
	हाल  7: वापस 0x7fffffff00000000ULL | bpf_अक्रम_u32(0);
	हाल  8: वापस 0xffffffffffffff00ULL ^ bpf_अक्रम_u32(24);
	हाल  9: वापस 0xffffffffffffff00ULL | bpf_अक्रम_u8(0);
	हाल 10: वापस 0x0000000010000000ULL | bpf_अक्रम_u32(0);
	हाल 11: वापस 0xf000000000000000ULL | bpf_अक्रम_u8(0);
	हाल 12: वापस 0x0000f00000000000ULL | bpf_अक्रम_u8(8);
	हाल 13: वापस 0x000000000f000000ULL | bpf_अक्रम_u8(16);
	हाल 14: वापस 0x0000000000000f00ULL | bpf_अक्रम_u8(32);
	हाल 15: वापस 0x00fff00000000f00ULL | bpf_अक्रम_u8(48);
	हाल 16: वापस 0x00007fffffffffffULL ^ bpf_अक्रम_u32(1);
	हाल 17: वापस 0xffff800000000000ULL | bpf_अक्रम_u8(4);
	हाल 18: वापस 0xffff800000000000ULL | bpf_अक्रम_u8(20);
	हाल 19: वापस (0xffffffc000000000ULL + 0x80000ULL) | bpf_अक्रम_u32(0);
	हाल 20: वापस (0xffffffc000000000ULL - 0x04000000ULL) | bpf_अक्रम_u32(0);
	हाल 21: वापस 0x0000000000000000ULL | bpf_अक्रम_u8(55) | bpf_अक्रम_u32(20);
	हाल 22: वापस 0xffffffffffffffffULL ^ bpf_अक्रम_u8(3) ^ bpf_अक्रम_u32(40);
	हाल 23: वापस 0x0000000000000000ULL | bpf_अक्रम_u8(bpf_अक्रम_u8(0) % 64);
	हाल 24: वापस 0x0000000000000000ULL | bpf_अक्रम_u16(bpf_अक्रम_u8(0) % 64);
	हाल 25: वापस 0xffffffffffffffffULL ^ bpf_अक्रम_u8(bpf_अक्रम_u8(0) % 64);
	हाल 26: वापस 0xffffffffffffffffULL ^ bpf_अक्रम_u40(bpf_अक्रम_u8(0) % 64);
	हाल 27: वापस 0x0000800000000000ULL;
	हाल 28: वापस 0x8000000000000000ULL;
	हाल 29: वापस 0x0000000000000000ULL;
	हाल 30: वापस 0xffffffffffffffffULL;
	हाल 31: वापस bpf_अक्रम_u16(bpf_अक्रम_u8(0) % 64);
	हाल 32: वापस bpf_अक्रम_u24(bpf_अक्रम_u8(0) % 64);
	हाल 33: वापस bpf_अक्रम_u32(bpf_अक्रम_u8(0) % 64);
	हाल 34: वापस bpf_अक्रम_u40(bpf_अक्रम_u8(0) % 64);
	हाल 35: वापस bpf_अक्रम_u48(bpf_अक्रम_u8(0) % 64);
	हाल 36: वापस bpf_अक्रम_u56(bpf_अक्रम_u8(0) % 64);
	हाल 37: वापस bpf_अक्रम_u64(bpf_अक्रम_u8(0) % 64);
	शेष: वापस bpf_अक्रम_u64(0);
	पूर्ण
पूर्ण

#पूर्ण_अगर /* __BPF_RAND__ */
