<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0-only */
/*
 *  arch/arm/include/यंत्र/xor.h
 *
 *  Copyright (C) 2001 Russell King
 */
#समावेश <linux/hardirq.h>
#समावेश <यंत्र-generic/xor.h>
#समावेश <यंत्र/hwcap.h>
#समावेश <यंत्र/neon.h>

#घोषणा __XOR(a1, a2) a1 ^= a2

#घोषणा GET_BLOCK_2(dst) \
	__यंत्र__("ldmia	%0, {%1, %2}" \
		: "=r" (dst), "=r" (a1), "=r" (a2) \
		: "0" (dst))

#घोषणा GET_BLOCK_4(dst) \
	__यंत्र__("ldmia	%0, {%1, %2, %3, %4}" \
		: "=r" (dst), "=r" (a1), "=r" (a2), "=r" (a3), "=r" (a4) \
		: "0" (dst))

#घोषणा XOR_BLOCK_2(src) \
	__यंत्र__("ldmia	%0!, {%1, %2}" \
		: "=r" (src), "=r" (b1), "=r" (b2) \
		: "0" (src)); \
	__XOR(a1, b1); __XOR(a2, b2);

#घोषणा XOR_BLOCK_4(src) \
	__यंत्र__("ldmia	%0!, {%1, %2, %3, %4}" \
		: "=r" (src), "=r" (b1), "=r" (b2), "=r" (b3), "=r" (b4) \
		: "0" (src)); \
	__XOR(a1, b1); __XOR(a2, b2); __XOR(a3, b3); __XOR(a4, b4)

#घोषणा PUT_BLOCK_2(dst) \
	__यंत्र__ __अस्थिर__("stmia	%0!, {%2, %3}" \
		: "=r" (dst) \
		: "0" (dst), "r" (a1), "r" (a2))

#घोषणा PUT_BLOCK_4(dst) \
	__यंत्र__ __अस्थिर__("stmia	%0!, {%2, %3, %4, %5}" \
		: "=r" (dst) \
		: "0" (dst), "r" (a1), "r" (a2), "r" (a3), "r" (a4))

अटल व्योम
xor_arm4regs_2(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2)
अणु
	अचिन्हित पूर्णांक lines = bytes / माप(अचिन्हित दीर्घ) / 4;
	रेजिस्टर अचिन्हित पूर्णांक a1 __यंत्र__("r4");
	रेजिस्टर अचिन्हित पूर्णांक a2 __यंत्र__("r5");
	रेजिस्टर अचिन्हित पूर्णांक a3 __यंत्र__("r6");
	रेजिस्टर अचिन्हित पूर्णांक a4 __यंत्र__("r7");
	रेजिस्टर अचिन्हित पूर्णांक b1 __यंत्र__("r8");
	रेजिस्टर अचिन्हित पूर्णांक b2 __यंत्र__("r9");
	रेजिस्टर अचिन्हित पूर्णांक b3 __यंत्र__("ip");
	रेजिस्टर अचिन्हित पूर्णांक b4 __यंत्र__("lr");

	करो अणु
		GET_BLOCK_4(p1);
		XOR_BLOCK_4(p2);
		PUT_BLOCK_4(p1);
	पूर्ण जबतक (--lines);
पूर्ण

अटल व्योम
xor_arm4regs_3(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2,
		अचिन्हित दीर्घ *p3)
अणु
	अचिन्हित पूर्णांक lines = bytes / माप(अचिन्हित दीर्घ) / 4;
	रेजिस्टर अचिन्हित पूर्णांक a1 __यंत्र__("r4");
	रेजिस्टर अचिन्हित पूर्णांक a2 __यंत्र__("r5");
	रेजिस्टर अचिन्हित पूर्णांक a3 __यंत्र__("r6");
	रेजिस्टर अचिन्हित पूर्णांक a4 __यंत्र__("r7");
	रेजिस्टर अचिन्हित पूर्णांक b1 __यंत्र__("r8");
	रेजिस्टर अचिन्हित पूर्णांक b2 __यंत्र__("r9");
	रेजिस्टर अचिन्हित पूर्णांक b3 __यंत्र__("ip");
	रेजिस्टर अचिन्हित पूर्णांक b4 __यंत्र__("lr");

	करो अणु
		GET_BLOCK_4(p1);
		XOR_BLOCK_4(p2);
		XOR_BLOCK_4(p3);
		PUT_BLOCK_4(p1);
	पूर्ण जबतक (--lines);
पूर्ण

अटल व्योम
xor_arm4regs_4(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2,
		अचिन्हित दीर्घ *p3, अचिन्हित दीर्घ *p4)
अणु
	अचिन्हित पूर्णांक lines = bytes / माप(अचिन्हित दीर्घ) / 2;
	रेजिस्टर अचिन्हित पूर्णांक a1 __यंत्र__("r8");
	रेजिस्टर अचिन्हित पूर्णांक a2 __यंत्र__("r9");
	रेजिस्टर अचिन्हित पूर्णांक b1 __यंत्र__("ip");
	रेजिस्टर अचिन्हित पूर्णांक b2 __यंत्र__("lr");

	करो अणु
		GET_BLOCK_2(p1);
		XOR_BLOCK_2(p2);
		XOR_BLOCK_2(p3);
		XOR_BLOCK_2(p4);
		PUT_BLOCK_2(p1);
	पूर्ण जबतक (--lines);
पूर्ण

अटल व्योम
xor_arm4regs_5(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2,
		अचिन्हित दीर्घ *p3, अचिन्हित दीर्घ *p4, अचिन्हित दीर्घ *p5)
अणु
	अचिन्हित पूर्णांक lines = bytes / माप(अचिन्हित दीर्घ) / 2;
	रेजिस्टर अचिन्हित पूर्णांक a1 __यंत्र__("r8");
	रेजिस्टर अचिन्हित पूर्णांक a2 __यंत्र__("r9");
	रेजिस्टर अचिन्हित पूर्णांक b1 __यंत्र__("ip");
	रेजिस्टर अचिन्हित पूर्णांक b2 __यंत्र__("lr");

	करो अणु
		GET_BLOCK_2(p1);
		XOR_BLOCK_2(p2);
		XOR_BLOCK_2(p3);
		XOR_BLOCK_2(p4);
		XOR_BLOCK_2(p5);
		PUT_BLOCK_2(p1);
	पूर्ण जबतक (--lines);
पूर्ण

अटल काष्ठा xor_block_ढाँचा xor_block_arm4regs = अणु
	.name	= "arm4regs",
	.करो_2	= xor_arm4regs_2,
	.करो_3	= xor_arm4regs_3,
	.करो_4	= xor_arm4regs_4,
	.करो_5	= xor_arm4regs_5,
पूर्ण;

#अघोषित XOR_TRY_TEMPLATES
#घोषणा XOR_TRY_TEMPLATES			\
	करो अणु					\
		xor_speed(&xor_block_arm4regs);	\
		xor_speed(&xor_block_8regs);	\
		xor_speed(&xor_block_32regs);	\
		NEON_TEMPLATES;			\
	पूर्ण जबतक (0)

#अगर_घोषित CONFIG_KERNEL_MODE_NEON

बाह्य काष्ठा xor_block_ढाँचा स्थिर xor_block_neon_inner;

अटल व्योम
xor_neon_2(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2)
अणु
	अगर (in_पूर्णांकerrupt()) अणु
		xor_arm4regs_2(bytes, p1, p2);
	पूर्ण अन्यथा अणु
		kernel_neon_begin();
		xor_block_neon_inner.करो_2(bytes, p1, p2);
		kernel_neon_end();
	पूर्ण
पूर्ण

अटल व्योम
xor_neon_3(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2,
		अचिन्हित दीर्घ *p3)
अणु
	अगर (in_पूर्णांकerrupt()) अणु
		xor_arm4regs_3(bytes, p1, p2, p3);
	पूर्ण अन्यथा अणु
		kernel_neon_begin();
		xor_block_neon_inner.करो_3(bytes, p1, p2, p3);
		kernel_neon_end();
	पूर्ण
पूर्ण

अटल व्योम
xor_neon_4(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2,
		अचिन्हित दीर्घ *p3, अचिन्हित दीर्घ *p4)
अणु
	अगर (in_पूर्णांकerrupt()) अणु
		xor_arm4regs_4(bytes, p1, p2, p3, p4);
	पूर्ण अन्यथा अणु
		kernel_neon_begin();
		xor_block_neon_inner.करो_4(bytes, p1, p2, p3, p4);
		kernel_neon_end();
	पूर्ण
पूर्ण

अटल व्योम
xor_neon_5(अचिन्हित दीर्घ bytes, अचिन्हित दीर्घ *p1, अचिन्हित दीर्घ *p2,
		अचिन्हित दीर्घ *p3, अचिन्हित दीर्घ *p4, अचिन्हित दीर्घ *p5)
अणु
	अगर (in_पूर्णांकerrupt()) अणु
		xor_arm4regs_5(bytes, p1, p2, p3, p4, p5);
	पूर्ण अन्यथा अणु
		kernel_neon_begin();
		xor_block_neon_inner.करो_5(bytes, p1, p2, p3, p4, p5);
		kernel_neon_end();
	पूर्ण
पूर्ण

अटल काष्ठा xor_block_ढाँचा xor_block_neon = अणु
	.name	= "neon",
	.करो_2	= xor_neon_2,
	.करो_3	= xor_neon_3,
	.करो_4	= xor_neon_4,
	.करो_5	= xor_neon_5
पूर्ण;

#घोषणा NEON_TEMPLATES	\
	करो अणु अगर (cpu_has_neon()) xor_speed(&xor_block_neon); पूर्ण जबतक (0)
#अन्यथा
#घोषणा NEON_TEMPLATES
#पूर्ण_अगर
