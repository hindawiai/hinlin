<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0 */
/*
 * Support क्रम Intel Camera Imaging ISP subप्रणाली.
 * Copyright (c) 2015, Intel Corporation.
 *
 * This program is मुक्त software; you can redistribute it and/or modअगरy it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License क्रम
 * more details.
 */

#अगर_अघोषित __IA_CSS_EVENT_PUBLIC_H
#घोषणा __IA_CSS_EVENT_PUBLIC_H

/* @file
 * This file contains CSS-API events functionality
 */

#समावेश <type_support.h>	/* uपूर्णांक8_t */
#समावेश <ia_css_err.h>		/* ia_css_err */
#समावेश <ia_css_types.h>	/* ia_css_pipe */
#समावेश <ia_css_समयr.h>	/* ia_css_समयr */

/* The event type, distinguishes the kind of events that
 * can are generated by the CSS प्रणाली.
 *
 * !!!IMPORTANT!!! KEEP THE FOLLOWING IN SYNC:
 * 1) "enum ia_css_event_type"					(ia_css_event_खुला.h)
 * 2) "enum sh_css_sp_event_type"				(sh_css_पूर्णांकernal.h)
 * 3) "enum ia_css_event_type event_id_2_event_mask"		(event_handler.sp.c)
 * 4) "enum ia_css_event_type convert_event_sp_to_host_domain"	(sh_css.c)
 */
क्रमागत ia_css_event_type अणु
	IA_CSS_EVENT_TYPE_OUTPUT_FRAME_DONE		= 1 << 0,
	/** Output frame पढ़ोy. */
	IA_CSS_EVENT_TYPE_SECOND_OUTPUT_FRAME_DONE	= 1 << 1,
	/** Second output frame पढ़ोy. */
	IA_CSS_EVENT_TYPE_VF_OUTPUT_FRAME_DONE		= 1 << 2,
	/** Viewfinder Output frame पढ़ोy. */
	IA_CSS_EVENT_TYPE_SECOND_VF_OUTPUT_FRAME_DONE	= 1 << 3,
	/** Second viewfinder Output frame पढ़ोy. */
	IA_CSS_EVENT_TYPE_3A_STATISTICS_DONE		= 1 << 4,
	/** Indication that 3A statistics are available. */
	IA_CSS_EVENT_TYPE_DIS_STATISTICS_DONE		= 1 << 5,
	/** Indication that DIS statistics are available. */
	IA_CSS_EVENT_TYPE_PIPELINE_DONE			= 1 << 6,
	/** Pipeline Done event, sent after last pipeline stage. */
	IA_CSS_EVENT_TYPE_FRAME_TAGGED			= 1 << 7,
	/** Frame tagged. */
	IA_CSS_EVENT_TYPE_INPUT_FRAME_DONE		= 1 << 8,
	/** Input frame पढ़ोy. */
	IA_CSS_EVENT_TYPE_METADATA_DONE			= 1 << 9,
	/** Metadata पढ़ोy. */
	IA_CSS_EVENT_TYPE_LACE_STATISTICS_DONE		= 1 << 10,
	/** Indication that LACE statistics are available. */
	IA_CSS_EVENT_TYPE_ACC_STAGE_COMPLETE		= 1 << 11,
	/** Extension stage complete. */
	IA_CSS_EVENT_TYPE_TIMER				= 1 << 12,
	/** Timer event क्रम measuring the SP side latencies. It contains the
	     32-bit समयr value from the SP */
	IA_CSS_EVENT_TYPE_PORT_खातापूर्ण			= 1 << 13,
	/** End Of Frame event, sent when in buffered sensor mode. */
	IA_CSS_EVENT_TYPE_FW_WARNING			= 1 << 14,
	/** Perक्रमmance warning encounter by FW */
	IA_CSS_EVENT_TYPE_FW_ASSERT			= 1 << 15,
	/** Assertion hit by FW */
पूर्ण;

#घोषणा IA_CSS_EVENT_TYPE_NONE 0

/* IA_CSS_EVENT_TYPE_ALL is a mask क्रम all pipe related events.
 * The other events (such as PORT_खातापूर्ण) cannot be enabled/disabled
 * and are hence excluded from this macro.
 */
#घोषणा IA_CSS_EVENT_TYPE_ALL \
	(IA_CSS_EVENT_TYPE_OUTPUT_FRAME_DONE		| \
	 IA_CSS_EVENT_TYPE_SECOND_OUTPUT_FRAME_DONE	| \
	 IA_CSS_EVENT_TYPE_VF_OUTPUT_FRAME_DONE		| \
	 IA_CSS_EVENT_TYPE_SECOND_VF_OUTPUT_FRAME_DONE	| \
	 IA_CSS_EVENT_TYPE_3A_STATISTICS_DONE		| \
	 IA_CSS_EVENT_TYPE_DIS_STATISTICS_DONE		| \
	 IA_CSS_EVENT_TYPE_PIPELINE_DONE		| \
	 IA_CSS_EVENT_TYPE_FRAME_TAGGED			| \
	 IA_CSS_EVENT_TYPE_INPUT_FRAME_DONE		| \
	 IA_CSS_EVENT_TYPE_METADATA_DONE		| \
	 IA_CSS_EVENT_TYPE_LACE_STATISTICS_DONE		| \
	 IA_CSS_EVENT_TYPE_ACC_STAGE_COMPLETE)

/* The event काष्ठा, container क्रम the event type and its related values.
 * Depending on the event type, either pipe or port will be filled.
 * Pipeline related events (like buffer/frame events) will वापस a valid and filled pipe handle.
 * For non pipeline related events (but i.e. stream specअगरic, like खातापूर्ण event), the port will be
 * filled.
 */
काष्ठा ia_css_event अणु
	काष्ठा ia_css_pipe    *pipe;
	/** Pipe handle on which event happened, शून्य क्रम non pipe related
	     events. */
	क्रमागत ia_css_event_type type;
	/** Type of Event, always valid/filled. */
	u8                port;
	/** Port number क्रम खातापूर्ण event (not valid क्रम other events). */
	u8                exp_id;
	/** Exposure id क्रम खातापूर्ण/FRAME_TAGGED/FW_WARNING event (not valid क्रम other events)
	     The exposure ID is unique only within a logical stream and it is
	     only generated on प्रणालीs that have an input प्रणाली (such as 2400
	     and 2401).
	     Most outमाला_दो produced by the CSS are tagged with an exposure ID.
	     This allows users of the CSS API to keep track of which buffer
	     was generated from which sensor output frame. This includes:
	     खातापूर्ण event, output frames, 3A statistics, DVS statistics and
	     sensor metadata.
	     Exposure IDs start at IA_CSS_MIN_EXPOSURE_ID, increment by one
	     until IA_CSS_MAX_EXPOSURE_ID is reached, after that they wrap
	     around to IA_CSS_MIN_EXPOSURE_ID again.
	     Note that in हाल frames are dropped, this will not be reflected
	     in the exposure IDs. Thereक्रम applications should not use this
	     to detect frame drops. */
	u32               fw_handle;
	/** Firmware Handle क्रम ACC_STAGE_COMPLETE event (not valid क्रम other
	     events). */
	क्रमागत ia_css_fw_warning fw_warning;
	/** Firmware warning code, only क्रम WARNING events. */
	u8                fw_निश्चित_module_id;
	/** Firmware module id, only क्रम ASSERT events, should be logged by driver. */
	u16               fw_निश्चित_line_no;
	/** Firmware line number, only क्रम ASSERT events, should be logged by driver. */
	घड़ी_value_t	       समयr_data;
	/** For storing the full 32-bit of the समयr value. Valid only क्रम TIMER
	     event */
	u8                समयr_code;
	/** For storing the code of the TIMER event. Valid only क्रम
	     TIMER event */
	u8                समयr_subcode;
	/** For storing the subcode of the TIMER event. Valid only
	     क्रम TIMER event */
पूर्ण;

/* @brief Dequeue a PSYS event from the CSS प्रणाली.
 *
 * @param[out]	event   Poपूर्णांकer to the event काष्ठा which will be filled by
 *                      this function अगर an event is available.
 * @वापस		-ENODATA अगर no events are
 *			available or
 *			0 otherwise.
 *
 * This function dequeues an event from the PSYS event queue. The queue is
 * between the Host CPU and the CSS प्रणाली. This function can be
 * called after an पूर्णांकerrupt has been generated that संकेतled that a new event
 * was available and can be used in a polling-like situation where the NO_EVENT
 * वापस value is used to determine whether an event was available or not.
 */
पूर्णांक
ia_css_dequeue_psys_event(काष्ठा ia_css_event *event);

/* @brief Dequeue an event from the CSS प्रणाली.
 *
 * @param[out]	event   Poपूर्णांकer to the event काष्ठा which will be filled by
 *                      this function अगर an event is available.
 * @वापस		-ENODATA अगर no events are
 *			available or
 *			0 otherwise.
 *
 * deprecatedअणुUse ia_css_dequeue_psys_event insteadपूर्ण.
 * Unless the isys event queue is explicitly enabled, this function will
 * dequeue both isys (खातापूर्ण) and psys events (all others).
 */
पूर्णांक
ia_css_dequeue_event(काष्ठा ia_css_event *event);

/* @brief Dequeue an ISYS event from the CSS प्रणाली.
 *
 * @param[out]	event   Poपूर्णांकer to the event काष्ठा which will be filled by
 *                      this function अगर an event is available.
 * @वापस		-ENODATA अगर no events are
 *			available or
 *			0 otherwise.
 *
 * This function dequeues an event from the ISYS event queue. The queue is
 * between host and the CSS प्रणाली.
 * Unlike the ia_css_dequeue_event() function, this function can be called
 * directly from an पूर्णांकerrupt service routine (ISR) and it is safe to call
 * this function in parallel with other CSS API functions (but only one
 * call to this function should be in flight at any poपूर्णांक in समय).
 *
 * The reason क्रम having the ISYS events separate is to prevent them from
 * incurring additional latency due to locks being held by other CSS API
 * functions.
 */
पूर्णांक
ia_css_dequeue_isys_event(काष्ठा ia_css_event *event);

#पूर्ण_अगर /* __IA_CSS_EVENT_PUBLIC_H */
