<शैली गुरु>
/* SPDX-License-Identअगरier: GPL-2.0 */
/* Copyright(c) 2013 - 2018 Intel Corporation. */

/* Modeled on trace-events-sample.h */

/* The trace subप्रणाली name क्रम i40e will be "i40e".
 *
 * This file is named i40e_trace.h.
 *
 * Since this include file's name is dअगरferent from the trace
 * subप्रणाली name, we'll have to define TRACE_INCLUDE_खाता at the end
 * of this file.
 */
#अघोषित TRACE_SYSTEM
#घोषणा TRACE_SYSTEM i40e

/* See trace-events-sample.h क्रम a detailed description of why this
 * guard clause is dअगरferent from most normal include files.
 */
#अगर !defined(_I40E_TRACE_H_) || defined(TRACE_HEADER_MULTI_READ)
#घोषणा _I40E_TRACE_H_

#समावेश <linux/tracepoपूर्णांक.h>

/*
 * i40e_trace() macro enables shared code to refer to trace poपूर्णांकs
 * like:
 *
 * trace_i40eअणु,vfपूर्ण_example(args...)
 *
 * ... as:
 *
 * i40e_trace(example, args...)
 *
 * ... to resolve to the PF or VF version of the tracepoपूर्णांक without
 * अगरdefs, and to allow tracepoपूर्णांकs to be disabled entirely at build
 * समय.
 *
 * Trace poपूर्णांक should always be referred to in the driver via this
 * macro.
 *
 * Similarly, i40e_trace_enabled(trace_name) wraps references to
 * trace_i40eअणु,vfपूर्ण_<trace_name>_enabled() functions.
 */
#घोषणा _I40E_TRACE_NAME(trace_name) (trace_ ## i40e ## _ ## trace_name)
#घोषणा I40E_TRACE_NAME(trace_name) _I40E_TRACE_NAME(trace_name)

#घोषणा i40e_trace(trace_name, args...) I40E_TRACE_NAME(trace_name)(args)

#घोषणा i40e_trace_enabled(trace_name) I40E_TRACE_NAME(trace_name##_enabled)()

/* Events common to PF and VF. Corresponding versions will be defined
 * क्रम both, named trace_i40e_* and trace_i40evf_*. The i40e_trace()
 * macro above will select the right trace poपूर्णांक name क्रम the driver
 * being built from shared code.
 */

/* Events related to a vsi & ring */
DECLARE_EVENT_CLASS(
	i40e_tx_ढाँचा,

	TP_PROTO(काष्ठा i40e_ring *ring,
		 काष्ठा i40e_tx_desc *desc,
		 काष्ठा i40e_tx_buffer *buf),

	TP_ARGS(ring, desc, buf),

	/* The convention here is to make the first fields in the
	 * TP_STRUCT match the TP_PROTO exactly. This enables the use
	 * of the args काष्ठा generated by the tplist tool (from the
	 * bcc-tools package) to be used क्रम those fields. To access
	 * fields other than the tracepoपूर्णांक args will require the
	 * tplist output to be adjusted.
	 */
	TP_STRUCT__entry(
		__field(व्योम*, ring)
		__field(व्योम*, desc)
		__field(व्योम*, buf)
		__string(devname, ring->netdev->name)
	),

	TP_fast_assign(
		__entry->ring = ring;
		__entry->desc = desc;
		__entry->buf = buf;
		__assign_str(devname, ring->netdev->name);
	),

	TP_prपूर्णांकk(
		"netdev: %s ring: %p desc: %p buf %p",
		__get_str(devname), __entry->ring,
		__entry->desc, __entry->buf)
);

DEFINE_EVENT(
	i40e_tx_ढाँचा, i40e_clean_tx_irq,
	TP_PROTO(काष्ठा i40e_ring *ring,
		 काष्ठा i40e_tx_desc *desc,
		 काष्ठा i40e_tx_buffer *buf),

	TP_ARGS(ring, desc, buf));

DEFINE_EVENT(
	i40e_tx_ढाँचा, i40e_clean_tx_irq_unmap,
	TP_PROTO(काष्ठा i40e_ring *ring,
		 काष्ठा i40e_tx_desc *desc,
		 काष्ठा i40e_tx_buffer *buf),

	TP_ARGS(ring, desc, buf));

DECLARE_EVENT_CLASS(
	i40e_rx_ढाँचा,

	TP_PROTO(काष्ठा i40e_ring *ring,
		 जोड़ i40e_16byte_rx_desc *desc,
		 काष्ठा sk_buff *skb),

	TP_ARGS(ring, desc, skb),

	TP_STRUCT__entry(
		__field(व्योम*, ring)
		__field(व्योम*, desc)
		__field(व्योम*, skb)
		__string(devname, ring->netdev->name)
	),

	TP_fast_assign(
		__entry->ring = ring;
		__entry->desc = desc;
		__entry->skb = skb;
		__assign_str(devname, ring->netdev->name);
	),

	TP_prपूर्णांकk(
		"netdev: %s ring: %p desc: %p skb %p",
		__get_str(devname), __entry->ring,
		__entry->desc, __entry->skb)
);

DEFINE_EVENT(
	i40e_rx_ढाँचा, i40e_clean_rx_irq,
	TP_PROTO(काष्ठा i40e_ring *ring,
		 जोड़ i40e_16byte_rx_desc *desc,
		 काष्ठा sk_buff *skb),

	TP_ARGS(ring, desc, skb));

DEFINE_EVENT(
	i40e_rx_ढाँचा, i40e_clean_rx_irq_rx,
	TP_PROTO(काष्ठा i40e_ring *ring,
		 जोड़ i40e_16byte_rx_desc *desc,
		 काष्ठा sk_buff *skb),

	TP_ARGS(ring, desc, skb));

DECLARE_EVENT_CLASS(
	i40e_xmit_ढाँचा,

	TP_PROTO(काष्ठा sk_buff *skb,
		 काष्ठा i40e_ring *ring),

	TP_ARGS(skb, ring),

	TP_STRUCT__entry(
		__field(व्योम*, skb)
		__field(व्योम*, ring)
		__string(devname, ring->netdev->name)
	),

	TP_fast_assign(
		__entry->skb = skb;
		__entry->ring = ring;
		__assign_str(devname, ring->netdev->name);
	),

	TP_prपूर्णांकk(
		"netdev: %s skb: %p ring: %p",
		__get_str(devname), __entry->skb,
		__entry->ring)
);

DEFINE_EVENT(
	i40e_xmit_ढाँचा, i40e_xmit_frame_ring,
	TP_PROTO(काष्ठा sk_buff *skb,
		 काष्ठा i40e_ring *ring),

	TP_ARGS(skb, ring));

DEFINE_EVENT(
	i40e_xmit_ढाँचा, i40e_xmit_frame_ring_drop,
	TP_PROTO(काष्ठा sk_buff *skb,
		 काष्ठा i40e_ring *ring),

	TP_ARGS(skb, ring));

/* Events unique to the PF. */

#पूर्ण_अगर /* _I40E_TRACE_H_ */
/* This must be outside अगरdef _I40E_TRACE_H */

/* This trace include file is not located in the .../include/trace
 * with the kernel tracepoपूर्णांक definitions, because we're a loadable
 * module.
 */
#अघोषित TRACE_INCLUDE_PATH
#घोषणा TRACE_INCLUDE_PATH .
#अघोषित TRACE_INCLUDE_खाता
#घोषणा TRACE_INCLUDE_खाता i40e_trace
#समावेश <trace/define_trace.h>
